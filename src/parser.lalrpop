use unit::{Prefix, Unit};
use unit::base::*;
use unit::derived::*;
use unit::prefix::*;
use std::str::FromStr;
use parser_terms::*;

grammar;

pub MainTerm: Term<'input> = {
    "/" <Term>,
    <Term>
};

pub Term: Term<'input> = {
    <c:Component> "." <t:Term> => Term::DotCombined(c, Box::new(t)),
    <c:Component> "/" <t:Term> => Term::SlashCombined(c, Box::new(t)),
    <Component> => Term::Basic(<>),
};

pub Component: Component<'input> = {
    <Annotatable><Annotation> => Component::AnnotatedAnnotatable(<>),
    <Annotatable> => Component::Annotatable(<>),
    <Annotation> => Component::Annotation(<>),
    <Factor> => Component::Factor(<>),
    "(" <Term> ")" => Component::Term(Box::new(<>)),
};

pub Annotation: Annotation<'input> = {
    "{" <s:r"[!-z|~]*\}"> => Annotation(s.trim_right_matches("}"))
};

pub Annotatable: Annotatable<'input> = {
    <SimpleUnit><Exponent> => Annotatable::UnitWithPower(<>),
    <SimpleUnit> => Annotatable::Unit(<>),
    <SpecialUnit> => Annotatable::SpecialUnit(<>),
};

pub SpecialUnit: SpecialUnit<'input> = {
    <fs:FunctionSymbol> "(" <fpn:FloatingPointNumber> <t:Term> ")" => {
        SpecialUnit(fs, fpn, Box::new(t))
    }
};

pub FunctionSymbol: FunctionSymbol = {
    "cel"  => FunctionSymbol::Cel,
    "degf" => FunctionSymbol::DegF,
    "degre"   => FunctionSymbol::DegRe,
    "100tan" => FunctionSymbol::OneHundredTan,
    "pH"   => FunctionSymbol::PH,
};

pub SimpleUnit: SimpleUnit = {
    <PrefixSymbol><AtomSymbol> => SimpleUnit::PrefixedAtom(<>),
    <AtomSymbol> => SimpleUnit::Atom(<>),
};

pub AtomSymbol: Box<Unit> = {
    <UnitByPrimaryCode>,
    <UnitBySecondaryCode>
};

UnitByPrimaryCode: Box<Unit> = {
    "1" => Box::new(TheUnity) as Box<Unit>,
    "m" => Box::new(Meter) as Box<Unit>,
    "s" => Box::new(Second) as Box<Unit>,
    "g" => Box::new(Gram) as Box<Unit>,
    "rad" => Box::new(Radian) as Box<Unit>,
    "K" => Box::new(Kelvin) as Box<Unit>,
    "C" => Box::new(Coulomb) as Box<Unit>,
    "cd" => Box::new(Candela) as Box<Unit>,

    "10^" => Box::new(TheNumberTenForArbitraryPowersCaret) as Box<Unit>,
    "10*" => Box::new(TheNumberTenForArbitraryPowersStar) as Box<Unit>,
    "[pi]" => Box::new(TheNumberPi) as Box<Unit>,
    "%" => Box::new(Percent) as Box<Unit>,
    "[ppth]" => Box::new(PartsPerThousand) as Box<Unit>,
    "[ppm]" => Box::new(PartsPerMillion) as Box<Unit>,
    "[ppb]" => Box::new(PartsPerBillion) as Box<Unit>,
    "mol" => Box::new(Mole) as Box<Unit>,
    "Cel" => Box::new(DegreeCelsius) as Box<Unit>,
    "deg" => Box::new(Degree) as Box<Unit>,
    "l" => Box::new(Liter) as Box<Unit>,
    "[degF]" => Box::new(DegreeFahrenheit) as Box<Unit>,
    "[degRe]" => Box::new(DegreeReaumur) as Box<Unit>,
    "[p'diop]" => Box::new(PrismDiopter) as Box<Unit>,
    "[pH]" => Box::new(PH) as Box<Unit>,
};

UnitBySecondaryCode: Box<Unit> = {
    "M" => Box::new(Meter) as Box<Unit>,
    "S" => Box::new(Second) as Box<Unit>,
    "G" => Box::new(Gram) as Box<Unit>,
    "RAD" => Box::new(Radian) as Box<Unit>,

    "CD" => Box::new(Candela) as Box<Unit>,
    "[PI]" => Box::new(TheNumberPi) as Box<Unit>,
    "[PPTH]" => Box::new(PartsPerThousand) as Box<Unit>,
    "[PPM]" => Box::new(PartsPerMillion) as Box<Unit>,
    "[PPB]" => Box::new(PartsPerBillion) as Box<Unit>,
    "MOL" => Box::new(Mole) as Box<Unit>,
    "CEL" => Box::new(DegreeCelsius) as Box<Unit>,
    "DEG" => Box::new(Degree) as Box<Unit>,
    "L" => Box::new(Liter) as Box<Unit>,
    "[DEGF]" => Box::new(DegreeFahrenheit) as Box<Unit>,
    "[P'DIOP]" => Box::new(PrismDiopter) as Box<Unit>,
    "[PH]" => Box::new(PH) as Box<Unit>,
};

pub PrefixSymbol: Box<Prefix> = {
    <PrefixByPrimaryCode>,
    <PrefixBySecondaryCode>
};

PrefixByPrimaryCode: Box<Prefix> = {
    "Y" => Box::new(Yotta) as Box<Prefix>,
    "Z" => Box::new(Zetta) as Box<Prefix>,
    "E" => Box::new(Exa) as Box<Prefix>,
    "P" => Box::new(Peta) as Box<Prefix>,
    "T" => Box::new(Tera) as Box<Prefix>,
    "G" => Box::new(Giga) as Box<Prefix>,
    "M" => Box::new(Mega) as Box<Prefix>,
    "k" => Box::new(Kilo) as Box<Prefix>,
    "h" => Box::new(Hecto) as Box<Prefix>,
    "da" => Box::new(Deka) as Box<Prefix>,
    "d" => Box::new(Deci) as Box<Prefix>,
    "c" => Box::new(Centi) as Box<Prefix>,
    "m" => Box::new(Milli) as Box<Prefix>,
    "u" => Box::new(Micro) as Box<Prefix>,
    "n" => Box::new(Nano) as Box<Prefix>,
    "p" => Box::new(Pico) as Box<Prefix>,
    "f" => Box::new(Femto) as Box<Prefix>,
    "a" => Box::new(Atto) as Box<Prefix>,
    "z" => Box::new(Zepto) as Box<Prefix>,
    "y" => Box::new(Yocto) as Box<Prefix>,
    "Mi" => Box::new(Mebi) as Box<Prefix>,
    "Gi" => Box::new(Gibi) as Box<Prefix>,
    "Ti" => Box::new(Tebi) as Box<Prefix>,
};

PrefixBySecondaryCode: Box<Prefix> = {
    "YA" => Box::new(Yotta) as Box<Prefix>,
    "ZA" => Box::new(Zetta) as Box<Prefix>,
    "EX" => Box::new(Exa) as Box<Prefix>,
    "PT" => Box::new(Peta) as Box<Prefix>,
    "TR" => Box::new(Tera) as Box<Prefix>,
    "GA" => Box::new(Giga) as Box<Prefix>,
    "MA" => Box::new(Mega) as Box<Prefix>,
    "K" => Box::new(Kilo) as Box<Prefix>,
    "H" => Box::new(Hecto) as Box<Prefix>,
    "DA" => Box::new(Deka) as Box<Prefix>,
    "D" => Box::new(Deci) as Box<Prefix>,
    "C" => Box::new(Centi) as Box<Prefix>,
    // "M" => Box::new(Milli) as Box<Prefix>,
    "U" => Box::new(Micro) as Box<Prefix>,
    "N" => Box::new(Nano) as Box<Prefix>,
    // "P" => Box::new(Pico) as Box<Prefix>,
    "F" => Box::new(Femto) as Box<Prefix>,
    "A" => Box::new(Atto) as Box<Prefix>,
    "ZO" => Box::new(Zepto) as Box<Prefix>,
    "YO" => Box::new(Yocto) as Box<Prefix>,
    "MIB" => Box::new(Mebi) as Box<Prefix>,
    "GIB" => Box::new(Gibi) as Box<Prefix>,
    "TIB" => Box::new(Tebi) as Box<Prefix>,
};

pub Exponent: Exponent = {
    <Sign><Digits> => Exponent(<>),
    <d:Digits> => Exponent(UnitSign::Positive, d)
};

pub Factor: Factor = {
    <Digits> => Factor(<>),
};

Digits: u32 = {
    <s:r"[0-9]+"> => u32::from_str(s).unwrap()
};

FloatingPointNumber: f64 = {
    <s:r"[+-]?[0-9]+\.[0-9]+"> => f64::from_str(s).unwrap()
};

Sign: UnitSign = { PositiveSign, NegativeSign };
PositiveSign: UnitSign = <s:"+"> => UnitSign::Positive;
NegativeSign: UnitSign = <s:"-"> => UnitSign::Negative;

// vi:ft=rust
