//-----------------------------------------------------------------------------
// DO NOT EDIT THIS FILE!
// This is generated at compile time.
//-----------------------------------------------------------------------------

use atom::Atom;
use std::fmt;

/// Property categorizes the unit by use. Not much mention of it in the UCUM
/// HTML spec, but is used throughout the
/// [XML description](http://unitsofmeasure.org/ucum-essence.xml).
///
#[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]
pub enum Property {
    Acceleration,
    Acidity,
    Action,
    ActionArea,
    AmountOfAProliferatingOrganism,
    AmountOfAnAllergenCallibratedThroughInVivoTestingBasedOnTheId50ealMethodOfIntradermalDilutionFor50mmSumOfErythemaDiameters,
    AmountOfAnAllergenCallibratedThroughInVivoTestingUsingTheStallergenesMethod,
    AmountOfAnInfectiousAgent,
    AmountOfFibrinogenBrokenDownIntoTheMeasuredDDimers,
    AmountOfInformation,
    AmountOfSubstance,
    AmountOfSubstanceDissolvedParticles,
    AmplitudeSpectralDensity,
    Arbitrary,
    ArbitraryBiologicActivity,
    ArbitraryElisaUnit,
    Area,
    BiologicActivityAntistreptolysinO,
    BiologicActivityInfectivityOfAnInfectiousAgentPreparation,
    BiologicActivityOfAmylase,
    BiologicActivityOfAnticardiolipinIgA,
    BiologicActivityOfAnticardiolipinIgG,
    BiologicActivityOfAnticardiolipinIgM,
    BiologicActivityOfFactorViiiInhibitor,
    BiologicActivityOfFactorXaInhibitorHeparin,
    BiologicActivityOfPhosphatase,
    BiologicActivityOfTuberculin,
    Brightness,
    CatalyticActivity,
    DepthOfWater,
    DoseEquivalent,
    DryVolume,
    DynamicViscosity,
    EhrlichUnit,
    ElectricCapacitance,
    ElectricCharge,
    ElectricConductance,
    ElectricCurrent,
    ElectricPermittivity,
    ElectricPotential,
    ElectricPotentialLevel,
    ElectricResistance,
    Energy,
    EnergyDose,
    FluidResistance,
    FluidVolume,
    FluxOfMagneticInduction,
    Force,
    Fraction,
    Frequency,
    GaugeOfCatheters,
    HeightOfHorses,
    HomeopathicPotencyHahnemann,
    HomeopathicPotencyKorsakov,
    HomeopathicPotencyRetired,
    Illuminance,
    Inductance,
    IonDose,
    KinematicViscosity,
    Length,
    Level,
    LinearMassDensityOfTextileThread,
    LineicNumber,
    LumIntensityDensity,
    LuminousFlux,
    LuminousIntensity,
    MagneticFieldIntensity,
    MagneticFlux,
    MagneticFluxDensity,
    MagneticPermeability,
    MagneticTension,
    Mass,
    MassConcentration,
    MassFraction,
    MetabolicCostOfPhysicalActivity,
    Number,
    PlaneAngle,
    Power,
    PowerLevel,
    Pressure,
    PressureLevel,
    ProcedureDefinedAmountOfAPoliomyelitisDAntigenSubstance,
    ProcedureDefinedAmountOfAProteinSubstance,
    ProcedureDefinedAmountOfAnAllergenUsingSomeReferenceStandard,
    ProcedureDefinedAmountOfAnAntigenSubstance,
    ProcedureDefinedAmountOfTheMajorAllergenOfRagweed,
    Radioactivity,
    RefractionOfALens,
    RefractionOfAPrism,
    SedimentationCoefficient,
    SignalTransmissionRate,
    Slope,
    SolidAngle,
    Temperature,
    Time,
    Unclassified,
    Velocity,
    ViewAreaInMicroscope,
    Volume,
    XRayAttenuation,
}

impl Property {
    pub fn atoms(&self) -> Vec<Atom> {
        match self {
            Property::Acceleration => {
                vec![
                    Atom::StandardAccelerationOfFreeFall,
                    Atom::Gal,
                ]
            },
            Property::Acidity => {
                vec![
                    Atom::PH,
                ]
            },
            Property::Action => {
                vec![
                    Atom::PlanckConstant,
                ]
            },
            Property::ActionArea => {
                vec![
                    Atom::Barn,
                ]
            },
            Property::AmountOfAProliferatingOrganism => {
                vec![
                    Atom::ColonyFormingUnits,
                ]
            },
            Property::AmountOfAnAllergenCallibratedThroughInVivoTestingBasedOnTheId50ealMethodOfIntradermalDilutionFor50mmSumOfErythemaDiameters => {
                vec![
                    Atom::BioequivalentAllergenUnit,
                ]
            },
            Property::AmountOfAnAllergenCallibratedThroughInVivoTestingUsingTheStallergenesMethod => {
                vec![
                    Atom::IndexOfReactivity,
                ]
            },
            Property::AmountOfAnInfectiousAgent => {
                vec![
                    Atom::PlaqueFormingUnits,
                    Atom::FocusFormingUnits,
                ]
            },
            Property::AmountOfFibrinogenBrokenDownIntoTheMeasuredDDimers => {
                vec![
                    Atom::FibrinogenEquivalentUnit,
                ]
            },
            Property::AmountOfInformation => {
                vec![
                    Atom::BitLogarithmusDualis,
                    Atom::Bit,
                    Atom::Byte,
                ]
            },
            Property::AmountOfSubstance => {
                vec![
                    Atom::Mole,
                    Atom::Equivalents,
                ]
            },
            Property::AmountOfSubstanceDissolvedParticles => {
                vec![
                    Atom::Osmole,
                ]
            },
            Property::AmplitudeSpectralDensity => {
                vec![
                    Atom::MeterPerSquareSecondsPerSquareRootOfHertz,
                ]
            },
            Property::Arbitrary => {
                vec![
                    Atom::InternationalUnit,
                    Atom::InternationalUnitSecondary,
                    Atom::ArbitaryUnit,
                    Atom::UnitedStatesPharmacopeiaUnit,
                ]
            },
            Property::ArbitraryBiologicActivity => {
                vec![
                    Atom::KunkelUnit,
                    Atom::MacLaganUnit,
                ]
            },
            Property::ArbitraryElisaUnit => {
                vec![
                    Atom::ElisaUnit,
                ]
            },
            Property::Area => {
                vec![
                    Atom::Are,
                    Atom::SquareInchInternational,
                    Atom::SquareFootInternational,
                    Atom::SquareYardInternational,
                    Atom::CircularMilInternational,
                    Atom::AcreUS,
                    Atom::SquareRodUS,
                    Atom::SquareMileUS,
                    Atom::Section,
                    Atom::Township,
                    Atom::AcreBritish,
                ]
            },
            Property::BiologicActivityAntistreptolysinO => {
                vec![
                    Atom::ToddUnit,
                ]
            },
            Property::BiologicActivityInfectivityOfAnInfectiousAgentPreparation => {
                vec![
                    Atom::CellCultureInfectiousDose,
                    Atom::TissueCultureInfectiousDose,
                    Atom::EmbryoInfectiousDose,
                ]
            },
            Property::BiologicActivityOfAmylase => {
                vec![
                    Atom::DyeUnit,
                    Atom::SomogyiUnit,
                ]
            },
            Property::BiologicActivityOfAnticardiolipinIgA => {
                vec![
                    Atom::AplUnit,
                ]
            },
            Property::BiologicActivityOfAnticardiolipinIgG => {
                vec![
                    Atom::GplUnit,
                ]
            },
            Property::BiologicActivityOfAnticardiolipinIgM => {
                vec![
                    Atom::MplUnit,
                ]
            },
            Property::BiologicActivityOfFactorViiiInhibitor => {
                vec![
                    Atom::BethesdaUnit,
                ]
            },
            Property::BiologicActivityOfFactorXaInhibitorHeparin => {
                vec![
                    Atom::AntiFactorXaUnit,
                ]
            },
            Property::BiologicActivityOfPhosphatase => {
                vec![
                    Atom::BodanskyUnit,
                    Atom::KingArmstrongUnit,
                ]
            },
            Property::BiologicActivityOfTuberculin => {
                vec![
                    Atom::TuberculinUnit,
                ]
            },
            Property::Brightness => {
                vec![
                    Atom::Lambert,
                ]
            },
            Property::CatalyticActivity => {
                vec![
                    Atom::Katal,
                    Atom::Unit,
                ]
            },
            Property::DepthOfWater => {
                vec![
                    Atom::FathomInternational,
                ]
            },
            Property::DoseEquivalent => {
                vec![
                    Atom::Sievert,
                    Atom::RadiationEquivalentMan,
                ]
            },
            Property::DryVolume => {
                vec![
                    Atom::BushelUS,
                    Atom::HistoricalWinchesterGallon,
                    Atom::PeckUS,
                    Atom::DryQuartUS,
                    Atom::DryPintUS,
                ]
            },
            Property::DynamicViscosity => {
                vec![
                    Atom::Poise,
                ]
            },
            Property::EhrlichUnit => {
                vec![
                    Atom::EhrlichUnit,
                ]
            },
            Property::ElectricCapacitance => {
                vec![
                    Atom::Farad,
                ]
            },
            Property::ElectricCharge => {
                vec![
                    Atom::Coulomb,
                    Atom::ElementaryCharge,
                ]
            },
            Property::ElectricConductance => {
                vec![
                    Atom::Siemens,
                    Atom::Mho,
                ]
            },
            Property::ElectricCurrent => {
                vec![
                    Atom::Ampere,
                    Atom::Biot,
                ]
            },
            Property::ElectricPermittivity => {
                vec![
                    Atom::PermittivityOfVacuum,
                ]
            },
            Property::ElectricPotential => {
                vec![
                    Atom::Volt,
                ]
            },
            Property::ElectricPotentialLevel => {
                vec![
                    Atom::BelVolt,
                    Atom::BelMillivolt,
                    Atom::BelMicrovolt,
                    Atom::Bel10Nanovolt,
                ]
            },
            Property::ElectricResistance => {
                vec![
                    Atom::Ohm,
                ]
            },
            Property::Energy => {
                vec![
                    Atom::Joule,
                    Atom::Electronvolt,
                    Atom::Erg,
                    Atom::CalorieAt15C,
                    Atom::CalorieAt20C,
                    Atom::MeanCalorie,
                    Atom::InternationalTableCalorie,
                    Atom::ThermochemicalCalorie,
                    Atom::Calorie,
                    Atom::NutritionLabelCalories,
                    Atom::BritishThermalUnitAt39F,
                    Atom::BritishThermalUnitAt59F,
                    Atom::BritishThermalUnitAt60F,
                    Atom::MeanBritishThermalUnit,
                    Atom::InternationalTableBritishThermalUnit,
                    Atom::ThermochemicalBritishThermalUnit,
                    Atom::BritishThermalUnit,
                ]
            },
            Property::EnergyDose => {
                vec![
                    Atom::Gray,
                    Atom::RadiationAbsorbedDose,
                ]
            },
            Property::FluidResistance => {
                vec![
                    Atom::PeripheralVascularResistanceUnit,
                    Atom::WoodUnit,
                ]
            },
            Property::FluidVolume => {
                vec![
                    Atom::QueenAnnesWineGallonUS,
                    Atom::BarrelUS,
                    Atom::QuartUS,
                    Atom::PintUS,
                    Atom::GillUS,
                    Atom::FluidOunceUS,
                    Atom::FluidDramUS,
                    Atom::MinimUS,
                    Atom::CordUS,
                    Atom::MetricFluidOunce,
                ]
            },
            Property::FluxOfMagneticInduction => {
                vec![
                    Atom::Maxwell,
                ]
            },
            Property::Force => {
                vec![
                    Atom::Newton,
                    Atom::GramForce,
                    Atom::PoundForceAvoirdupois,
                    Atom::Dyne,
                ]
            },
            Property::Fraction => {
                vec![
                    Atom::Percent,
                    Atom::PartsPerThousand,
                    Atom::PartsPerMillion,
                    Atom::PartsPerBillion,
                    Atom::PartsPerTrillion,
                ]
            },
            Property::Frequency => {
                vec![
                    Atom::Hertz,
                ]
            },
            Property::GaugeOfCatheters => {
                vec![
                    Atom::Charriere,
                ]
            },
            Property::HeightOfHorses => {
                vec![
                    Atom::HandInternational,
                ]
            },
            Property::HomeopathicPotencyHahnemann => {
                vec![
                    Atom::HomeopathicPotencyOfDecimalHahnemannianSeries,
                    Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries,
                    Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries,
                    Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries,
                ]
            },
            Property::HomeopathicPotencyKorsakov => {
                vec![
                    Atom::HomeopathicPotencyOfDecimalKorsakovianSeries,
                    Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries,
                    Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries,
                    Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries,
                ]
            },
            Property::HomeopathicPotencyRetired => {
                vec![
                    Atom::HomeopathicPotencyOfDecimalSeriesRetired,
                    Atom::HomeopathicPotencyOfCentesimalSeriesRetired,
                    Atom::HomeopathicPotencyOfMillesimalSeriesRetired,
                    Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired,
                ]
            },
            Property::Illuminance => {
                vec![
                    Atom::Lux,
                    Atom::Phot,
                ]
            },
            Property::Inductance => {
                vec![
                    Atom::Henry,
                ]
            },
            Property::IonDose => {
                vec![
                    Atom::Roentgen,
                ]
            },
            Property::KinematicViscosity => {
                vec![
                    Atom::Stokes,
                ]
            },
            Property::Length => {
                vec![
                    Atom::Meter,
                    Atom::AstronomicUnit,
                    Atom::Parsec,
                    Atom::LightYear,
                    Atom::InchInternational,
                    Atom::FootInternational,
                    Atom::YardInternational,
                    Atom::MileInternational,
                    Atom::NauticalMileInternational,
                    Atom::MilInternational,
                    Atom::FootUS,
                    Atom::YardUS,
                    Atom::InchUS,
                    Atom::RodUS,
                    Atom::GuntersChainUS,
                    Atom::LinkForGuntersChainUS,
                    Atom::RamdensChainUS,
                    Atom::LinkForRamdensChainUS,
                    Atom::FathomUS,
                    Atom::FurlongUS,
                    Atom::MileUS,
                    Atom::MilUS,
                    Atom::InchBritish,
                    Atom::FootBritish,
                    Atom::RodBritish,
                    Atom::GuntersChainBritish,
                    Atom::LinkForGuntersChainBritish,
                    Atom::FathomBritish,
                    Atom::PaceBritish,
                    Atom::YardBritish,
                    Atom::MileBritish,
                    Atom::NauticalMileBritish,
                    Atom::Line,
                    Atom::Point,
                    Atom::Pica,
                    Atom::PrintersPoint,
                    Atom::PrintersPica,
                    Atom::Pied,
                    Atom::Pouce,
                    Atom::Ligne,
                    Atom::Didot,
                    Atom::Cicero,
                    Atom::Angstrom,
                    Atom::Smoot,
                ]
            },
            Property::Level => {
                vec![
                    Atom::Neper,
                    Atom::Bel,
                ]
            },
            Property::LinearMassDensityOfTextileThread => {
                vec![
                    Atom::Tex,
                    Atom::Denier,
                ]
            },
            Property::LineicNumber => {
                vec![
                    Atom::Kayser,
                    Atom::MeshInternational,
                ]
            },
            Property::LumIntensityDensity => {
                vec![
                    Atom::Stilb,
                ]
            },
            Property::LuminousFlux => {
                vec![
                    Atom::Lumen,
                ]
            },
            Property::LuminousIntensity => {
                vec![
                    Atom::Candela,
                ]
            },
            Property::MagneticFieldIntensity => {
                vec![
                    Atom::Oersted,
                ]
            },
            Property::MagneticFlux => {
                vec![
                    Atom::Weber,
                ]
            },
            Property::MagneticFluxDensity => {
                vec![
                    Atom::Tesla,
                    Atom::Gauss,
                ]
            },
            Property::MagneticPermeability => {
                vec![
                    Atom::PermeabilityOfVacuum,
                ]
            },
            Property::MagneticTension => {
                vec![
                    Atom::Gilbert,
                ]
            },
            Property::Mass => {
                vec![
                    Atom::Gram,
                    Atom::Tonne,
                    Atom::UnifiedAtomicMassUnit,
                    Atom::ElectronMass,
                    Atom::ProtonMass,
                    Atom::Grain,
                    Atom::PoundAvoirdupois,
                    Atom::OunceAvoirdupois,
                    Atom::DramAvoirdupois,
                    Atom::ShortHundredweightAvoirdupois,
                    Atom::LongHunderdweightAvoirdupois,
                    Atom::ShortTonAvoirdupois,
                    Atom::LongTonAvoirdupois,
                    Atom::StoneAvoirdupois,
                    Atom::PennyweightTroy,
                    Atom::OunceTroy,
                    Atom::PoundTroy,
                    Atom::ScrupleApothecaries,
                    Atom::DramApothecaries,
                    Atom::OunceApothecaries,
                    Atom::PoundApothecaries,
                    Atom::MetricOunce,
                    Atom::MetricCarat,
                ]
            },
            Property::MassConcentration => {
                vec![
                    Atom::GramPercent,
                ]
            },
            Property::MassFraction => {
                vec![
                    Atom::CaratOfGoldAlloys,
                ]
            },
            Property::MetabolicCostOfPhysicalActivity => {
                vec![
                    Atom::MetabolicEquivalent,
                ]
            },
            Property::Number => {
                vec![
                    Atom::TheNumberTenForArbitraryPowersStar,
                    Atom::TheNumberTenForArbitraryPowersCaret,
                    Atom::TheNumberPi,
                ]
            },
            Property::PlaneAngle => {
                vec![
                    Atom::Radian,
                    Atom::Gon,
                    Atom::Degree,
                    Atom::MinuteAngle,
                    Atom::SecondAngle,
                    Atom::Circle,
                ]
            },
            Property::Power => {
                vec![
                    Atom::Watt,
                    Atom::Horsepower,
                ]
            },
            Property::PowerLevel => {
                vec![
                    Atom::BelWatt,
                    Atom::BelKilowatt,
                ]
            },
            Property::Pressure => {
                vec![
                    Atom::Pascal,
                    Atom::Bar,
                    Atom::StandardAtmosphere,
                    Atom::MeterOfWaterColumn,
                    Atom::MeterOfMercuryColumn,
                    Atom::InchOfWaterColumn,
                    Atom::InchOfMercuryColumn,
                    Atom::TechnicalAtmosphere,
                    Atom::PoundPerSqareInch,
                ]
            },
            Property::PressureLevel => {
                vec![
                    Atom::BelSoundPressure,
                ]
            },
            Property::ProcedureDefinedAmountOfAPoliomyelitisDAntigenSubstance => {
                vec![
                    Atom::DAntigenUnit,
                ]
            },
            Property::ProcedureDefinedAmountOfAProteinSubstance => {
                vec![
                    Atom::ProteinNitrogenUnit,
                ]
            },
            Property::ProcedureDefinedAmountOfAnAllergenUsingSomeReferenceStandard => {
                vec![
                    Atom::AllergenUnit,
                ]
            },
            Property::ProcedureDefinedAmountOfAnAntigenSubstance => {
                vec![
                    Atom::LimitOfFlocculation,
                ]
            },
            Property::ProcedureDefinedAmountOfTheMajorAllergenOfRagweed => {
                vec![
                    Atom::AllergenUnitForAmbrosiaArtemisiifolia,
                ]
            },
            Property::Radioactivity => {
                vec![
                    Atom::Becquerel,
                    Atom::Curie,
                ]
            },
            Property::RefractionOfALens => {
                vec![
                    Atom::Diopter,
                ]
            },
            Property::RefractionOfAPrism => {
                vec![
                    Atom::PrismDiopter,
                ]
            },
            Property::SedimentationCoefficient => {
                vec![
                    Atom::SvedbergUnit,
                ]
            },
            Property::SignalTransmissionRate => {
                vec![
                    Atom::Baud,
                ]
            },
            Property::Slope => {
                vec![
                    Atom::PercentOfSlope,
                ]
            },
            Property::SolidAngle => {
                vec![
                    Atom::Steradian,
                    Atom::Spere,
                ]
            },
            Property::Temperature => {
                vec![
                    Atom::Kelvin,
                    Atom::DegreeCelsius,
                    Atom::DegreeFahrenheit,
                    Atom::DegreeRankine,
                    Atom::DegreeReaumur,
                ]
            },
            Property::Time => {
                vec![
                    Atom::Second,
                    Atom::Minute,
                    Atom::Hour,
                    Atom::Day,
                    Atom::TropicalYear,
                    Atom::MeanJulianYear,
                    Atom::MeanGregorianYear,
                    Atom::Year,
                    Atom::Week,
                    Atom::SynodalMonth,
                    Atom::MeanJulianMonth,
                    Atom::MeanGregorianMonth,
                    Atom::Month,
                ]
            },
            Property::Unclassified => {
                vec![
                    Atom::BoltzmannConstant,
                    Atom::NewtonianConstantOfGravitation,
                ]
            },
            Property::Velocity => {
                vec![
                    Atom::VelocityOfLight,
                    Atom::KnotInternational,
                    Atom::KnotBritish,
                ]
            },
            Property::ViewAreaInMicroscope => {
                vec![
                    Atom::HighPowerField,
                    Atom::LowPowerField,
                ]
            },
            Property::Volume => {
                vec![
                    Atom::Liter,
                    Atom::LiterSecondary,
                    Atom::CubicInchInternational,
                    Atom::CubicFootInternational,
                    Atom::CubicYardInternational,
                    Atom::BoardFootInternational,
                    Atom::CordInternational,
                    Atom::TablespoonUS,
                    Atom::TeaspoonUS,
                    Atom::CupUS,
                    Atom::MetricCup,
                    Atom::MetricTeaspoon,
                    Atom::MetricTablespoon,
                    Atom::GallonBritish,
                    Atom::PeckBritish,
                    Atom::BushelBritish,
                    Atom::QuartBritish,
                    Atom::PintBritish,
                    Atom::GillBritish,
                    Atom::FluidOunceBritish,
                    Atom::FluidDramBritish,
                    Atom::MinimBritish,
                    Atom::Drop,
                    Atom::Stere,
                ]
            },
            Property::XRayAttenuation => {
                vec![
                    Atom::HounsfieldUnit,
                ]
            },
        }
    }
}

impl Default for Property {
    fn default() -> Property {
        Property::Unclassified
    }
}

impl fmt::Display for Property {
    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        let string = match *self {
            Property::Acceleration => {
                "acceleration"
            },
            Property::Acidity => {
                "acidity"
            },
            Property::Action => {
                "action"
            },
            Property::ActionArea => {
                "action area"
            },
            Property::AmountOfAProliferatingOrganism => {
                "amount of a proliferating organism"
            },
            Property::AmountOfAnAllergenCallibratedThroughInVivoTestingBasedOnTheId50ealMethodOfIntradermalDilutionFor50mmSumOfErythemaDiameters => {
                "amount of an allergen callibrated through in-vivo testing based on the ID50EAL method of (intradermal dilution for 50mm sum of erythema diameters"
            },
            Property::AmountOfAnAllergenCallibratedThroughInVivoTestingUsingTheStallergenesMethod => {
                "amount of an allergen callibrated through in-vivo testing using the Stallergenes® method."
            },
            Property::AmountOfAnInfectiousAgent => {
                "amount of an infectious agent"
            },
            Property::AmountOfFibrinogenBrokenDownIntoTheMeasuredDDimers => {
                "amount of fibrinogen broken down into the measured d-dimers"
            },
            Property::AmountOfInformation => {
                "amount of information"
            },
            Property::AmountOfSubstance => {
                "amount of substance"
            },
            Property::AmountOfSubstanceDissolvedParticles => {
                "amount of substance (dissolved particles)"
            },
            Property::AmplitudeSpectralDensity => {
                "amplitude spectral density"
            },
            Property::Arbitrary => {
                "arbitrary"
            },
            Property::ArbitraryBiologicActivity => {
                "arbitrary biologic activity"
            },
            Property::ArbitraryElisaUnit => {
                "arbitrary ELISA unit"
            },
            Property::Area => {
                "area"
            },
            Property::BiologicActivityAntistreptolysinO => {
                "biologic activity antistreptolysin O"
            },
            Property::BiologicActivityInfectivityOfAnInfectiousAgentPreparation => {
                "biologic activity (infectivity) of an infectious agent preparation"
            },
            Property::BiologicActivityOfAmylase => {
                "biologic activity of amylase"
            },
            Property::BiologicActivityOfAnticardiolipinIgA => {
                "biologic activity of anticardiolipin IgA"
            },
            Property::BiologicActivityOfAnticardiolipinIgG => {
                "biologic activity of anticardiolipin IgG"
            },
            Property::BiologicActivityOfAnticardiolipinIgM => {
                "biologic activity of anticardiolipin IgM"
            },
            Property::BiologicActivityOfFactorViiiInhibitor => {
                "biologic activity of factor VIII inhibitor"
            },
            Property::BiologicActivityOfFactorXaInhibitorHeparin => {
                "biologic activity of factor Xa inhibitor (heparin)"
            },
            Property::BiologicActivityOfPhosphatase => {
                "biologic activity of phosphatase"
            },
            Property::BiologicActivityOfTuberculin => {
                "biologic activity of tuberculin"
            },
            Property::Brightness => {
                "brightness"
            },
            Property::CatalyticActivity => {
                "catalytic activity"
            },
            Property::DepthOfWater => {
                "depth of water"
            },
            Property::DoseEquivalent => {
                "dose equivalent"
            },
            Property::DryVolume => {
                "dry volume"
            },
            Property::DynamicViscosity => {
                "dynamic viscosity"
            },
            Property::EhrlichUnit => {
                "Ehrlich unit"
            },
            Property::ElectricCapacitance => {
                "electric capacitance"
            },
            Property::ElectricCharge => {
                "electric charge"
            },
            Property::ElectricConductance => {
                "electric conductance"
            },
            Property::ElectricCurrent => {
                "electric current"
            },
            Property::ElectricPermittivity => {
                "electric permittivity"
            },
            Property::ElectricPotential => {
                "electric potential"
            },
            Property::ElectricPotentialLevel => {
                "electric potential level"
            },
            Property::ElectricResistance => {
                "electric resistance"
            },
            Property::Energy => {
                "energy"
            },
            Property::EnergyDose => {
                "energy dose"
            },
            Property::FluidResistance => {
                "fluid resistance"
            },
            Property::FluidVolume => {
                "fluid volume"
            },
            Property::FluxOfMagneticInduction => {
                "flux of magnetic induction"
            },
            Property::Force => {
                "force"
            },
            Property::Fraction => {
                "fraction"
            },
            Property::Frequency => {
                "frequency"
            },
            Property::GaugeOfCatheters => {
                "gauge of catheters"
            },
            Property::HeightOfHorses => {
                "height of horses"
            },
            Property::HomeopathicPotencyHahnemann => {
                "homeopathic potency (Hahnemann)"
            },
            Property::HomeopathicPotencyKorsakov => {
                "homeopathic potency (Korsakov)"
            },
            Property::HomeopathicPotencyRetired => {
                "homeopathic potency (retired)"
            },
            Property::Illuminance => {
                "illuminance"
            },
            Property::Inductance => {
                "inductance"
            },
            Property::IonDose => {
                "ion dose"
            },
            Property::KinematicViscosity => {
                "kinematic viscosity"
            },
            Property::Length => {
                "length"
            },
            Property::Level => {
                "level"
            },
            Property::LinearMassDensityOfTextileThread => {
                "linear mass density (of textile thread)"
            },
            Property::LineicNumber => {
                "lineic number"
            },
            Property::LumIntensityDensity => {
                "lum. intensity density"
            },
            Property::LuminousFlux => {
                "luminous flux"
            },
            Property::LuminousIntensity => {
                "luminous intensity"
            },
            Property::MagneticFieldIntensity => {
                "magnetic field intensity"
            },
            Property::MagneticFlux => {
                "magnetic flux"
            },
            Property::MagneticFluxDensity => {
                "magnetic flux density"
            },
            Property::MagneticPermeability => {
                "magnetic permeability"
            },
            Property::MagneticTension => {
                "magnetic tension"
            },
            Property::Mass => {
                "mass"
            },
            Property::MassConcentration => {
                "mass concentration"
            },
            Property::MassFraction => {
                "mass fraction"
            },
            Property::MetabolicCostOfPhysicalActivity => {
                "metabolic cost of physical activity"
            },
            Property::Number => {
                "number"
            },
            Property::PlaneAngle => {
                "plane angle"
            },
            Property::Power => {
                "power"
            },
            Property::PowerLevel => {
                "power level"
            },
            Property::Pressure => {
                "pressure"
            },
            Property::PressureLevel => {
                "pressure level"
            },
            Property::ProcedureDefinedAmountOfAPoliomyelitisDAntigenSubstance => {
                "procedure defined amount of a poliomyelitis d-antigen substance"
            },
            Property::ProcedureDefinedAmountOfAProteinSubstance => {
                "procedure defined amount of a protein substance"
            },
            Property::ProcedureDefinedAmountOfAnAllergenUsingSomeReferenceStandard => {
                "procedure defined amount of an allergen using some reference standard"
            },
            Property::ProcedureDefinedAmountOfAnAntigenSubstance => {
                "procedure defined amount of an antigen substance"
            },
            Property::ProcedureDefinedAmountOfTheMajorAllergenOfRagweed => {
                "procedure defined amount of the major allergen of ragweed."
            },
            Property::Radioactivity => {
                "radioactivity"
            },
            Property::RefractionOfALens => {
                "refraction of a lens"
            },
            Property::RefractionOfAPrism => {
                "refraction of a prism"
            },
            Property::SedimentationCoefficient => {
                "sedimentation coefficient"
            },
            Property::SignalTransmissionRate => {
                "signal transmission rate"
            },
            Property::Slope => {
                "slope"
            },
            Property::SolidAngle => {
                "solid angle"
            },
            Property::Temperature => {
                "temperature"
            },
            Property::Time => {
                "time"
            },
            Property::Unclassified => {
                "(unclassified)"
            },
            Property::Velocity => {
                "velocity"
            },
            Property::ViewAreaInMicroscope => {
                "view area in microscope"
            },
            Property::Volume => {
                "volume"
            },
            Property::XRayAttenuation => {
                "x-ray attenuation"
            },
        };

        write!(formatter, "{}", string)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn validate_display() {
        let a = format!("{}", Property::Acceleration);
        assert_eq!(a, "acceleration".to_string());
    }
}
