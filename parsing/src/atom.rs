//-----------------------------------------------------------------------------
// DO NOT EDIT THIS FILE!
// This is generated at compile time.
//-----------------------------------------------------------------------------

// Because long numbers are generated, there's no way (that I know of) to
// generate them using underscores (to make them pass the clippy lint).
#![cfg_attr(feature = "cargo-clippy", allow(unreadable_literal))]

use classification::Classification;
use composable::Composable;
use composition::Composition;
use definition::Definition;
use dimension::Dimension;
use function_set::FunctionSet;
use property::Property;
use std::fmt;
use ucum_symbol::UcumSymbol;

// TODO: Implement PartialEq
#[cfg_attr(feature = "with_serde", derive(Serialize, Deserialize))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Atom {
    Meter,
    Second,
    Gram,
    Radian,
    Kelvin,
    Coulomb,
    Candela,
    TheNumberTenForArbitraryPowersStar,
    TheNumberTenForArbitraryPowersCaret,
    TheNumberPi,
    Percent,
    PartsPerThousand,
    PartsPerMillion,
    PartsPerBillion,
    PartsPerTrillion,
    Mole,
    Steradian,
    Hertz,
    Newton,
    Pascal,
    Joule,
    Watt,
    Ampere,
    Volt,
    Farad,
    Ohm,
    Siemens,
    Weber,
    DegreeCelsius,
    Tesla,
    Henry,
    Lumen,
    Lux,
    Becquerel,
    Gray,
    Sievert,
    Gon,
    Degree,
    MinuteAngle,
    SecondAngle,
    Liter,
    LiterSecondary,
    Are,
    Minute,
    Hour,
    Day,
    TropicalYear,
    MeanJulianYear,
    MeanGregorianYear,
    Year,
    Week,
    SynodalMonth,
    MeanJulianMonth,
    MeanGregorianMonth,
    Month,
    Tonne,
    Bar,
    UnifiedAtomicMassUnit,
    Electronvolt,
    AstronomicUnit,
    Parsec,
    VelocityOfLight,
    PlanckConstant,
    BoltzmannConstant,
    PermittivityOfVacuum,
    PermeabilityOfVacuum,
    ElementaryCharge,
    ElectronMass,
    ProtonMass,
    NewtonianConstantOfGravitation,
    StandardAccelerationOfFreeFall,
    StandardAtmosphere,
    LightYear,
    GramForce,
    PoundForceAvoirdupois,
    Kayser,
    Gal,
    Dyne,
    Erg,
    Poise,
    Biot,
    Stokes,
    Maxwell,
    Gauss,
    Oersted,
    Gilbert,
    Stilb,
    Lambert,
    Phot,
    Curie,
    Roentgen,
    RadiationAbsorbedDose,
    RadiationEquivalentMan,
    InchInternational,
    FootInternational,
    YardInternational,
    MileInternational,
    FathomInternational,
    NauticalMileInternational,
    KnotInternational,
    SquareInchInternational,
    SquareFootInternational,
    SquareYardInternational,
    CubicInchInternational,
    CubicFootInternational,
    CubicYardInternational,
    BoardFootInternational,
    CordInternational,
    MilInternational,
    CircularMilInternational,
    HandInternational,
    FootUS,
    YardUS,
    InchUS,
    RodUS,
    GuntersChainUS,
    LinkForGuntersChainUS,
    RamdensChainUS,
    LinkForRamdensChainUS,
    FathomUS,
    FurlongUS,
    MileUS,
    AcreUS,
    SquareRodUS,
    SquareMileUS,
    Section,
    Township,
    MilUS,
    InchBritish,
    FootBritish,
    RodBritish,
    GuntersChainBritish,
    LinkForGuntersChainBritish,
    FathomBritish,
    PaceBritish,
    YardBritish,
    MileBritish,
    NauticalMileBritish,
    KnotBritish,
    AcreBritish,
    QueenAnnesWineGallonUS,
    BarrelUS,
    QuartUS,
    PintUS,
    GillUS,
    FluidOunceUS,
    FluidDramUS,
    MinimUS,
    CordUS,
    BushelUS,
    HistoricalWinchesterGallon,
    PeckUS,
    DryQuartUS,
    DryPintUS,
    TablespoonUS,
    TeaspoonUS,
    CupUS,
    MetricFluidOunce,
    MetricCup,
    MetricTeaspoon,
    MetricTablespoon,
    GallonBritish,
    PeckBritish,
    BushelBritish,
    QuartBritish,
    PintBritish,
    GillBritish,
    FluidOunceBritish,
    FluidDramBritish,
    MinimBritish,
    Grain,
    PoundAvoirdupois,
    OunceAvoirdupois,
    DramAvoirdupois,
    ShortHundredweightAvoirdupois,
    LongHunderdweightAvoirdupois,
    ShortTonAvoirdupois,
    LongTonAvoirdupois,
    StoneAvoirdupois,
    PennyweightTroy,
    OunceTroy,
    PoundTroy,
    ScrupleApothecaries,
    DramApothecaries,
    OunceApothecaries,
    PoundApothecaries,
    MetricOunce,
    Line,
    Point,
    Pica,
    PrintersPoint,
    PrintersPica,
    Pied,
    Pouce,
    Ligne,
    Didot,
    Cicero,
    DegreeFahrenheit,
    DegreeRankine,
    DegreeReaumur,
    CalorieAt15C,
    CalorieAt20C,
    MeanCalorie,
    InternationalTableCalorie,
    ThermochemicalCalorie,
    Calorie,
    NutritionLabelCalories,
    BritishThermalUnitAt39F,
    BritishThermalUnitAt59F,
    BritishThermalUnitAt60F,
    MeanBritishThermalUnit,
    InternationalTableBritishThermalUnit,
    ThermochemicalBritishThermalUnit,
    BritishThermalUnit,
    Horsepower,
    Tex,
    Denier,
    MeterOfWaterColumn,
    MeterOfMercuryColumn,
    InchOfWaterColumn,
    InchOfMercuryColumn,
    PeripheralVascularResistanceUnit,
    WoodUnit,
    Diopter,
    PrismDiopter,
    PercentOfSlope,
    MeshInternational,
    Charriere,
    Drop,
    HounsfieldUnit,
    MetabolicEquivalent,
    HomeopathicPotencyOfDecimalSeriesRetired,
    HomeopathicPotencyOfCentesimalSeriesRetired,
    HomeopathicPotencyOfMillesimalSeriesRetired,
    HomeopathicPotencyOfQuintamillesimalSeriesRetired,
    HomeopathicPotencyOfDecimalHahnemannianSeries,
    HomeopathicPotencyOfCentesimalHahnemannianSeries,
    HomeopathicPotencyOfMillesimalHahnemannianSeries,
    HomeopathicPotencyOfQuintamillesimalHahnemannianSeries,
    HomeopathicPotencyOfDecimalKorsakovianSeries,
    HomeopathicPotencyOfCentesimalKorsakovianSeries,
    HomeopathicPotencyOfMillesimalKorsakovianSeries,
    HomeopathicPotencyOfQuintamillesimalKorsakovianSeries,
    Equivalents,
    Osmole,
    PH,
    GramPercent,
    SvedbergUnit,
    HighPowerField,
    LowPowerField,
    Katal,
    Unit,
    InternationalUnit,
    InternationalUnitSecondary,
    ArbitaryUnit,
    UnitedStatesPharmacopeiaUnit,
    GplUnit,
    MplUnit,
    AplUnit,
    BethesdaUnit,
    AntiFactorXaUnit,
    ToddUnit,
    DyeUnit,
    SomogyiUnit,
    BodanskyUnit,
    KingArmstrongUnit,
    KunkelUnit,
    MacLaganUnit,
    TuberculinUnit,
    CellCultureInfectiousDose,
    TissueCultureInfectiousDose,
    EmbryoInfectiousDose,
    PlaqueFormingUnits,
    FocusFormingUnits,
    ColonyFormingUnits,
    IndexOfReactivity,
    BioequivalentAllergenUnit,
    AllergenUnit,
    AllergenUnitForAmbrosiaArtemisiifolia,
    ProteinNitrogenUnit,
    LimitOfFlocculation,
    DAntigenUnit,
    FibrinogenEquivalentUnit,
    ElisaUnit,
    EhrlichUnit,
    Neper,
    Bel,
    BelSoundPressure,
    BelVolt,
    BelMillivolt,
    BelMicrovolt,
    Bel10Nanovolt,
    BelWatt,
    BelKilowatt,
    Stere,
    Angstrom,
    Barn,
    TechnicalAtmosphere,
    Mho,
    PoundPerSqareInch,
    Circle,
    Spere,
    MetricCarat,
    CaratOfGoldAlloys,
    Smoot,
    MeterPerSquareSecondsPerSquareRootOfHertz,
    BitLogarithmusDualis,
    Bit,
    Byte,
    Baud,
}

impl UcumSymbol for Atom {
    fn classification(&self) -> Classification {
        match *self {
            Atom::Meter => Classification::Si,
            Atom::Second => Classification::Si,
            Atom::Gram => Classification::Si,
            Atom::Radian => Classification::Si,
            Atom::Kelvin => Classification::Si,
            Atom::Coulomb => Classification::Si,
            Atom::Candela => Classification::Si,
            Atom::TheNumberTenForArbitraryPowersStar => Classification::Dimless,
            Atom::TheNumberTenForArbitraryPowersCaret => Classification::Dimless,
            Atom::TheNumberPi => Classification::Dimless,
            Atom::Percent => Classification::Dimless,
            Atom::PartsPerThousand => Classification::Dimless,
            Atom::PartsPerMillion => Classification::Dimless,
            Atom::PartsPerBillion => Classification::Dimless,
            Atom::PartsPerTrillion => Classification::Dimless,
            Atom::Mole => Classification::Si,
            Atom::Steradian => Classification::Si,
            Atom::Hertz => Classification::Si,
            Atom::Newton => Classification::Si,
            Atom::Pascal => Classification::Si,
            Atom::Joule => Classification::Si,
            Atom::Watt => Classification::Si,
            Atom::Ampere => Classification::Si,
            Atom::Volt => Classification::Si,
            Atom::Farad => Classification::Si,
            Atom::Ohm => Classification::Si,
            Atom::Siemens => Classification::Si,
            Atom::Weber => Classification::Si,
            Atom::DegreeCelsius => Classification::Si,
            Atom::Tesla => Classification::Si,
            Atom::Henry => Classification::Si,
            Atom::Lumen => Classification::Si,
            Atom::Lux => Classification::Si,
            Atom::Becquerel => Classification::Si,
            Atom::Gray => Classification::Si,
            Atom::Sievert => Classification::Si,
            Atom::Gon => Classification::Iso1000,
            Atom::Degree => Classification::Iso1000,
            Atom::MinuteAngle => Classification::Iso1000,
            Atom::SecondAngle => Classification::Iso1000,
            Atom::Liter => Classification::Iso1000,
            Atom::LiterSecondary => Classification::Iso1000,
            Atom::Are => Classification::Iso1000,
            Atom::Minute => Classification::Iso1000,
            Atom::Hour => Classification::Iso1000,
            Atom::Day => Classification::Iso1000,
            Atom::TropicalYear => Classification::Iso1000,
            Atom::MeanJulianYear => Classification::Iso1000,
            Atom::MeanGregorianYear => Classification::Iso1000,
            Atom::Year => Classification::Iso1000,
            Atom::Week => Classification::Iso1000,
            Atom::SynodalMonth => Classification::Iso1000,
            Atom::MeanJulianMonth => Classification::Iso1000,
            Atom::MeanGregorianMonth => Classification::Iso1000,
            Atom::Month => Classification::Iso1000,
            Atom::Tonne => Classification::Iso1000,
            Atom::Bar => Classification::Iso1000,
            Atom::UnifiedAtomicMassUnit => Classification::Iso1000,
            Atom::Electronvolt => Classification::Iso1000,
            Atom::AstronomicUnit => Classification::Iso1000,
            Atom::Parsec => Classification::Iso1000,
            Atom::VelocityOfLight => Classification::Const,
            Atom::PlanckConstant => Classification::Const,
            Atom::BoltzmannConstant => Classification::Const,
            Atom::PermittivityOfVacuum => Classification::Const,
            Atom::PermeabilityOfVacuum => Classification::Const,
            Atom::ElementaryCharge => Classification::Const,
            Atom::ElectronMass => Classification::Const,
            Atom::ProtonMass => Classification::Const,
            Atom::NewtonianConstantOfGravitation => Classification::Const,
            Atom::StandardAccelerationOfFreeFall => Classification::Const,
            Atom::StandardAtmosphere => Classification::Const,
            Atom::LightYear => Classification::Const,
            Atom::GramForce => Classification::Const,
            Atom::PoundForceAvoirdupois => Classification::Const,
            Atom::Kayser => Classification::Cgs,
            Atom::Gal => Classification::Cgs,
            Atom::Dyne => Classification::Cgs,
            Atom::Erg => Classification::Cgs,
            Atom::Poise => Classification::Cgs,
            Atom::Biot => Classification::Cgs,
            Atom::Stokes => Classification::Cgs,
            Atom::Maxwell => Classification::Cgs,
            Atom::Gauss => Classification::Cgs,
            Atom::Oersted => Classification::Cgs,
            Atom::Gilbert => Classification::Cgs,
            Atom::Stilb => Classification::Cgs,
            Atom::Lambert => Classification::Cgs,
            Atom::Phot => Classification::Cgs,
            Atom::Curie => Classification::Cgs,
            Atom::Roentgen => Classification::Cgs,
            Atom::RadiationAbsorbedDose => Classification::Cgs,
            Atom::RadiationEquivalentMan => Classification::Cgs,
            Atom::InchInternational => Classification::Intcust,
            Atom::FootInternational => Classification::Intcust,
            Atom::YardInternational => Classification::Intcust,
            Atom::MileInternational => Classification::Intcust,
            Atom::FathomInternational => Classification::Intcust,
            Atom::NauticalMileInternational => Classification::Intcust,
            Atom::KnotInternational => Classification::Intcust,
            Atom::SquareInchInternational => Classification::Intcust,
            Atom::SquareFootInternational => Classification::Intcust,
            Atom::SquareYardInternational => Classification::Intcust,
            Atom::CubicInchInternational => Classification::Intcust,
            Atom::CubicFootInternational => Classification::Intcust,
            Atom::CubicYardInternational => Classification::Intcust,
            Atom::BoardFootInternational => Classification::Intcust,
            Atom::CordInternational => Classification::Intcust,
            Atom::MilInternational => Classification::Intcust,
            Atom::CircularMilInternational => Classification::Intcust,
            Atom::HandInternational => Classification::Intcust,
            Atom::FootUS => Classification::UsLengths,
            Atom::YardUS => Classification::UsLengths,
            Atom::InchUS => Classification::UsLengths,
            Atom::RodUS => Classification::UsLengths,
            Atom::GuntersChainUS => Classification::UsLengths,
            Atom::LinkForGuntersChainUS => Classification::UsLengths,
            Atom::RamdensChainUS => Classification::UsLengths,
            Atom::LinkForRamdensChainUS => Classification::UsLengths,
            Atom::FathomUS => Classification::UsLengths,
            Atom::FurlongUS => Classification::UsLengths,
            Atom::MileUS => Classification::UsLengths,
            Atom::AcreUS => Classification::UsLengths,
            Atom::SquareRodUS => Classification::UsLengths,
            Atom::SquareMileUS => Classification::UsLengths,
            Atom::Section => Classification::UsLengths,
            Atom::Township => Classification::UsLengths,
            Atom::MilUS => Classification::UsLengths,
            Atom::InchBritish => Classification::BritLength,
            Atom::FootBritish => Classification::BritLength,
            Atom::RodBritish => Classification::BritLength,
            Atom::GuntersChainBritish => Classification::BritLength,
            Atom::LinkForGuntersChainBritish => Classification::BritLength,
            Atom::FathomBritish => Classification::BritLength,
            Atom::PaceBritish => Classification::BritLength,
            Atom::YardBritish => Classification::BritLength,
            Atom::MileBritish => Classification::BritLength,
            Atom::NauticalMileBritish => Classification::BritLength,
            Atom::KnotBritish => Classification::BritLength,
            Atom::AcreBritish => Classification::BritLength,
            Atom::QueenAnnesWineGallonUS => Classification::UsVolumes,
            Atom::BarrelUS => Classification::UsVolumes,
            Atom::QuartUS => Classification::UsVolumes,
            Atom::PintUS => Classification::UsVolumes,
            Atom::GillUS => Classification::UsVolumes,
            Atom::FluidOunceUS => Classification::UsVolumes,
            Atom::FluidDramUS => Classification::UsVolumes,
            Atom::MinimUS => Classification::UsVolumes,
            Atom::CordUS => Classification::UsVolumes,
            Atom::BushelUS => Classification::UsVolumes,
            Atom::HistoricalWinchesterGallon => Classification::UsVolumes,
            Atom::PeckUS => Classification::UsVolumes,
            Atom::DryQuartUS => Classification::UsVolumes,
            Atom::DryPintUS => Classification::UsVolumes,
            Atom::TablespoonUS => Classification::UsVolumes,
            Atom::TeaspoonUS => Classification::UsVolumes,
            Atom::CupUS => Classification::UsVolumes,
            Atom::MetricFluidOunce => Classification::UsVolumes,
            Atom::MetricCup => Classification::UsVolumes,
            Atom::MetricTeaspoon => Classification::UsVolumes,
            Atom::MetricTablespoon => Classification::UsVolumes,
            Atom::GallonBritish => Classification::BritVolumes,
            Atom::PeckBritish => Classification::BritVolumes,
            Atom::BushelBritish => Classification::BritVolumes,
            Atom::QuartBritish => Classification::BritVolumes,
            Atom::PintBritish => Classification::BritVolumes,
            Atom::GillBritish => Classification::BritVolumes,
            Atom::FluidOunceBritish => Classification::BritVolumes,
            Atom::FluidDramBritish => Classification::BritVolumes,
            Atom::MinimBritish => Classification::BritVolumes,
            Atom::Grain => Classification::Avoirdupois,
            Atom::PoundAvoirdupois => Classification::Avoirdupois,
            Atom::OunceAvoirdupois => Classification::Avoirdupois,
            Atom::DramAvoirdupois => Classification::Avoirdupois,
            Atom::ShortHundredweightAvoirdupois => Classification::Avoirdupois,
            Atom::LongHunderdweightAvoirdupois => Classification::Avoirdupois,
            Atom::ShortTonAvoirdupois => Classification::Avoirdupois,
            Atom::LongTonAvoirdupois => Classification::Avoirdupois,
            Atom::StoneAvoirdupois => Classification::Avoirdupois,
            Atom::PennyweightTroy => Classification::Troy,
            Atom::OunceTroy => Classification::Troy,
            Atom::PoundTroy => Classification::Troy,
            Atom::ScrupleApothecaries => Classification::Apoth,
            Atom::DramApothecaries => Classification::Apoth,
            Atom::OunceApothecaries => Classification::Apoth,
            Atom::PoundApothecaries => Classification::Apoth,
            Atom::MetricOunce => Classification::Apoth,
            Atom::Line => Classification::Typeset,
            Atom::Point => Classification::Typeset,
            Atom::Pica => Classification::Typeset,
            Atom::PrintersPoint => Classification::Typeset,
            Atom::PrintersPica => Classification::Typeset,
            Atom::Pied => Classification::Typeset,
            Atom::Pouce => Classification::Typeset,
            Atom::Ligne => Classification::Typeset,
            Atom::Didot => Classification::Typeset,
            Atom::Cicero => Classification::Typeset,
            Atom::DegreeFahrenheit => Classification::Heat,
            Atom::DegreeRankine => Classification::Heat,
            Atom::DegreeReaumur => Classification::Heat,
            Atom::CalorieAt15C => Classification::Heat,
            Atom::CalorieAt20C => Classification::Heat,
            Atom::MeanCalorie => Classification::Heat,
            Atom::InternationalTableCalorie => Classification::Heat,
            Atom::ThermochemicalCalorie => Classification::Heat,
            Atom::Calorie => Classification::Heat,
            Atom::NutritionLabelCalories => Classification::Heat,
            Atom::BritishThermalUnitAt39F => Classification::Heat,
            Atom::BritishThermalUnitAt59F => Classification::Heat,
            Atom::BritishThermalUnitAt60F => Classification::Heat,
            Atom::MeanBritishThermalUnit => Classification::Heat,
            Atom::InternationalTableBritishThermalUnit => Classification::Heat,
            Atom::ThermochemicalBritishThermalUnit => Classification::Heat,
            Atom::BritishThermalUnit => Classification::Heat,
            Atom::Horsepower => Classification::Heat,
            Atom::Tex => Classification::Heat,
            Atom::Denier => Classification::Heat,
            Atom::MeterOfWaterColumn => Classification::Clinical,
            Atom::MeterOfMercuryColumn => Classification::Clinical,
            Atom::InchOfWaterColumn => Classification::Clinical,
            Atom::InchOfMercuryColumn => Classification::Clinical,
            Atom::PeripheralVascularResistanceUnit => Classification::Clinical,
            Atom::WoodUnit => Classification::Clinical,
            Atom::Diopter => Classification::Clinical,
            Atom::PrismDiopter => Classification::Clinical,
            Atom::PercentOfSlope => Classification::Clinical,
            Atom::MeshInternational => Classification::Clinical,
            Atom::Charriere => Classification::Clinical,
            Atom::Drop => Classification::Clinical,
            Atom::HounsfieldUnit => Classification::Clinical,
            Atom::MetabolicEquivalent => Classification::Clinical,
            Atom::HomeopathicPotencyOfDecimalSeriesRetired => Classification::Clinical,
            Atom::HomeopathicPotencyOfCentesimalSeriesRetired => Classification::Clinical,
            Atom::HomeopathicPotencyOfMillesimalSeriesRetired => Classification::Clinical,
            Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Classification::Clinical,
            Atom::HomeopathicPotencyOfDecimalHahnemannianSeries => Classification::Clinical,
            Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries => Classification::Clinical,
            Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries => Classification::Clinical,
            Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => Classification::Clinical,
            Atom::HomeopathicPotencyOfDecimalKorsakovianSeries => Classification::Clinical,
            Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries => Classification::Clinical,
            Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries => Classification::Clinical,
            Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Classification::Clinical,
            Atom::Equivalents => Classification::Chemical,
            Atom::Osmole => Classification::Chemical,
            Atom::PH => Classification::Chemical,
            Atom::GramPercent => Classification::Chemical,
            Atom::SvedbergUnit => Classification::Chemical,
            Atom::HighPowerField => Classification::Chemical,
            Atom::LowPowerField => Classification::Chemical,
            Atom::Katal => Classification::Chemical,
            Atom::Unit => Classification::Chemical,
            Atom::InternationalUnit => Classification::Chemical,
            Atom::InternationalUnitSecondary => Classification::Chemical,
            Atom::ArbitaryUnit => Classification::Chemical,
            Atom::UnitedStatesPharmacopeiaUnit => Classification::Chemical,
            Atom::GplUnit => Classification::Chemical,
            Atom::MplUnit => Classification::Chemical,
            Atom::AplUnit => Classification::Chemical,
            Atom::BethesdaUnit => Classification::Chemical,
            Atom::AntiFactorXaUnit => Classification::Chemical,
            Atom::ToddUnit => Classification::Chemical,
            Atom::DyeUnit => Classification::Chemical,
            Atom::SomogyiUnit => Classification::Chemical,
            Atom::BodanskyUnit => Classification::Chemical,
            Atom::KingArmstrongUnit => Classification::Chemical,
            Atom::KunkelUnit => Classification::Chemical,
            Atom::MacLaganUnit => Classification::Chemical,
            Atom::TuberculinUnit => Classification::Chemical,
            Atom::CellCultureInfectiousDose => Classification::Chemical,
            Atom::TissueCultureInfectiousDose => Classification::Chemical,
            Atom::EmbryoInfectiousDose => Classification::Chemical,
            Atom::PlaqueFormingUnits => Classification::Chemical,
            Atom::FocusFormingUnits => Classification::Chemical,
            Atom::ColonyFormingUnits => Classification::Chemical,
            Atom::IndexOfReactivity => Classification::Chemical,
            Atom::BioequivalentAllergenUnit => Classification::Chemical,
            Atom::AllergenUnit => Classification::Chemical,
            Atom::AllergenUnitForAmbrosiaArtemisiifolia => Classification::Chemical,
            Atom::ProteinNitrogenUnit => Classification::Chemical,
            Atom::LimitOfFlocculation => Classification::Chemical,
            Atom::DAntigenUnit => Classification::Chemical,
            Atom::FibrinogenEquivalentUnit => Classification::Chemical,
            Atom::ElisaUnit => Classification::Chemical,
            Atom::EhrlichUnit => Classification::Chemical,
            Atom::Neper => Classification::Levels,
            Atom::Bel => Classification::Levels,
            Atom::BelSoundPressure => Classification::Levels,
            Atom::BelVolt => Classification::Levels,
            Atom::BelMillivolt => Classification::Levels,
            Atom::BelMicrovolt => Classification::Levels,
            Atom::Bel10Nanovolt => Classification::Levels,
            Atom::BelWatt => Classification::Levels,
            Atom::BelKilowatt => Classification::Levels,
            Atom::Stere => Classification::Misc,
            Atom::Angstrom => Classification::Misc,
            Atom::Barn => Classification::Misc,
            Atom::TechnicalAtmosphere => Classification::Misc,
            Atom::Mho => Classification::Misc,
            Atom::PoundPerSqareInch => Classification::Misc,
            Atom::Circle => Classification::Misc,
            Atom::Spere => Classification::Misc,
            Atom::MetricCarat => Classification::Misc,
            Atom::CaratOfGoldAlloys => Classification::Misc,
            Atom::Smoot => Classification::Misc,
            Atom::MeterPerSquareSecondsPerSquareRootOfHertz => Classification::Misc,
            Atom::BitLogarithmusDualis => Classification::Infotech,
            Atom::Bit => Classification::Infotech,
            Atom::Byte => Classification::Infotech,
            Atom::Baud => Classification::Infotech,
        }
    }

    fn definition(&self) -> Definition {
        let result = match *self {
            Atom::Meter => Definition::new(1.0, "1", None),
            Atom::Second => Definition::new(1.0, "1", None),
            Atom::Gram => Definition::new(1.0, "1", None),
            Atom::Radian => Definition::new(1.0, "1", None),
            Atom::Kelvin => Definition::new(1.0, "1", None),
            Atom::Coulomb => Definition::new(1.0, "1", None),
            Atom::Candela => Definition::new(1.0, "1", None),
            Atom::TheNumberTenForArbitraryPowersStar => Definition::new(10.0, "1", None),
            Atom::TheNumberTenForArbitraryPowersCaret => Definition::new(10.0, "1", None),
            Atom::TheNumberPi => Definition::new(::std::f64::consts::PI, "1", None),
            Atom::Percent => Definition::new(1.0, "10*-2", None),
            Atom::PartsPerThousand => Definition::new(1.0, "10*-3", None),
            Atom::PartsPerMillion => Definition::new(1.0, "10*-6", None),
            Atom::PartsPerBillion => Definition::new(1.0, "10*-9", None),
            Atom::PartsPerTrillion => Definition::new(1.0, "10*-12", None),
            Atom::Mole => Definition::new(6.0221367, "10*23", None),
            Atom::Steradian => Definition::new(1.0, "rad2", None),
            Atom::Hertz => Definition::new(1.0, "s-1", None),
            Atom::Newton => Definition::new(1.0, "kg.m/s2", None),
            Atom::Pascal => Definition::new(1.0, "N/m2", None),
            Atom::Joule => Definition::new(1.0, "N.m", None),
            Atom::Watt => Definition::new(1.0, "J/s", None),
            Atom::Ampere => Definition::new(1.0, "C/s", None),
            Atom::Volt => Definition::new(1.0, "J/C", None),
            Atom::Farad => Definition::new(1.0, "C/V", None),
            Atom::Ohm => Definition::new(1.0, "V/A", None),
            Atom::Siemens => Definition::new(1.0, "Ohm-1", None),
            Atom::Weber => Definition::new(1.0, "V.s", None),
            Atom::DegreeCelsius => Definition::new(1.0, "K", Some(FunctionSet { convert_from: |value: f64| value - 273.15, convert_to: |value: f64| value + 273.15 })),
            Atom::Tesla => Definition::new(1.0, "Wb/m2", None),
            Atom::Henry => Definition::new(1.0, "Wb/A", None),
            Atom::Lumen => Definition::new(1.0, "cd.sr", None),
            Atom::Lux => Definition::new(1.0, "lm/m2", None),
            Atom::Becquerel => Definition::new(1.0, "s-1", None),
            Atom::Gray => Definition::new(1.0, "J/kg", None),
            Atom::Sievert => Definition::new(1.0, "J/kg", None),
            Atom::Gon => Definition::new(0.9, "deg", None),
            Atom::Degree => Definition::new(2.0, "[pi].rad/360", None),
            Atom::MinuteAngle => Definition::new(1.0, "deg/60", None),
            Atom::SecondAngle => Definition::new(1.0, "'/60", None),
            Atom::Liter => Definition::new(1.0, "dm3", None),
            Atom::LiterSecondary => Definition::new(1.0, "l", None),
            Atom::Are => Definition::new(100.0, "m2", None),
            Atom::Minute => Definition::new(60.0, "s", None),
            Atom::Hour => Definition::new(60.0, "min", None),
            Atom::Day => Definition::new(24.0, "h", None),
            Atom::TropicalYear => Definition::new(365.24219, "d", None),
            Atom::MeanJulianYear => Definition::new(365.25, "d", None),
            Atom::MeanGregorianYear => Definition::new(365.2425, "d", None),
            Atom::Year => Definition::new(1.0, "a_j", None),
            Atom::Week => Definition::new(7.0, "d", None),
            Atom::SynodalMonth => Definition::new(29.53059, "d", None),
            Atom::MeanJulianMonth => Definition::new(1.0, "a_j/12", None),
            Atom::MeanGregorianMonth => Definition::new(1.0, "a_g/12", None),
            Atom::Month => Definition::new(1.0, "mo_j", None),
            Atom::Tonne => Definition::new(1000.0, "kg", None),
            Atom::Bar => Definition::new(100000.0, "Pa", None),
            Atom::UnifiedAtomicMassUnit => Definition::new(0.0000000000000000000000016605402, "g", None),
            Atom::Electronvolt => Definition::new(1.0, "[e].V", None),
            Atom::AstronomicUnit => Definition::new(149597.870691, "Mm", None),
            Atom::Parsec => Definition::new(30856780000000000.0, "m", None),
            Atom::VelocityOfLight => Definition::new(299792458.0, "m/s", None),
            Atom::PlanckConstant => Definition::new(0.00000000000000000000000000000000066260755, "J.s", None),
            Atom::BoltzmannConstant => Definition::new(0.00000000000000000000001380658, "J/K", None),
            Atom::PermittivityOfVacuum => Definition::new(0.000000000008854187817, "F/m", None),
            Atom::PermeabilityOfVacuum => Definition::new(1.0, "4.[pi].10*-7.N/A2", None),
            Atom::ElementaryCharge => Definition::new(0.000000000000000000160217733, "C", None),
            Atom::ElectronMass => Definition::new(0.00000000000000000000000000091093897, "g", None),
            Atom::ProtonMass => Definition::new(0.0000000000000000000000016726231, "g", None),
            Atom::NewtonianConstantOfGravitation => Definition::new(0.0000000000667259, "m3.kg-1.s-2", None),
            Atom::StandardAccelerationOfFreeFall => Definition::new(9.80665, "m/s2", None),
            Atom::StandardAtmosphere => Definition::new(101325.0, "Pa", None),
            Atom::LightYear => Definition::new(1.0, "[c].a_j", None),
            Atom::GramForce => Definition::new(1.0, "g.[g]", None),
            Atom::PoundForceAvoirdupois => Definition::new(1.0, "[lb_av].[g]", None),
            Atom::Kayser => Definition::new(1.0, "cm-1", None),
            Atom::Gal => Definition::new(1.0, "cm/s2", None),
            Atom::Dyne => Definition::new(1.0, "g.cm/s2", None),
            Atom::Erg => Definition::new(1.0, "dyn.cm", None),
            Atom::Poise => Definition::new(1.0, "dyn.s/cm2", None),
            Atom::Biot => Definition::new(10.0, "A", None),
            Atom::Stokes => Definition::new(1.0, "cm2/s", None),
            Atom::Maxwell => Definition::new(0.00000001, "Wb", None),
            Atom::Gauss => Definition::new(0.0001, "T", None),
            Atom::Oersted => Definition::new(250.0, "/[pi].A/m", None),
            Atom::Gilbert => Definition::new(1.0, "Oe.cm", None),
            Atom::Stilb => Definition::new(1.0, "cd/cm2", None),
            Atom::Lambert => Definition::new(1.0, "cd/cm2/[pi]", None),
            Atom::Phot => Definition::new(0.0001, "lx", None),
            Atom::Curie => Definition::new(37000000000.0, "Bq", None),
            Atom::Roentgen => Definition::new(0.000258, "C/kg", None),
            Atom::RadiationAbsorbedDose => Definition::new(100.0, "erg/g", None),
            Atom::RadiationEquivalentMan => Definition::new(1.0, "RAD", None),
            Atom::InchInternational => Definition::new(2.54, "cm", None),
            Atom::FootInternational => Definition::new(12.0, "[in_i]", None),
            Atom::YardInternational => Definition::new(3.0, "[ft_i]", None),
            Atom::MileInternational => Definition::new(5280.0, "[ft_i]", None),
            Atom::FathomInternational => Definition::new(6.0, "[ft_i]", None),
            Atom::NauticalMileInternational => Definition::new(1852.0, "m", None),
            Atom::KnotInternational => Definition::new(1.0, "[nmi_i]/h", None),
            Atom::SquareInchInternational => Definition::new(1.0, "[in_i]2", None),
            Atom::SquareFootInternational => Definition::new(1.0, "[ft_i]2", None),
            Atom::SquareYardInternational => Definition::new(1.0, "[yd_i]2", None),
            Atom::CubicInchInternational => Definition::new(1.0, "[in_i]3", None),
            Atom::CubicFootInternational => Definition::new(1.0, "[ft_i]3", None),
            Atom::CubicYardInternational => Definition::new(1.0, "[yd_i]3", None),
            Atom::BoardFootInternational => Definition::new(144.0, "[in_i]3", None),
            Atom::CordInternational => Definition::new(128.0, "[ft_i]3", None),
            Atom::MilInternational => Definition::new(0.001, "[in_i]", None),
            Atom::CircularMilInternational => Definition::new(1.0, "[pi]/4.[mil_i]2", None),
            Atom::HandInternational => Definition::new(4.0, "[in_i]", None),
            Atom::FootUS => Definition::new(1200.0, "m/3937", None),
            Atom::YardUS => Definition::new(3.0, "[ft_us]", None),
            Atom::InchUS => Definition::new(1.0, "[ft_us]/12", None),
            Atom::RodUS => Definition::new(16.5, "[ft_us]", None),
            Atom::GuntersChainUS => Definition::new(4.0, "[rd_us]", None),
            Atom::LinkForGuntersChainUS => Definition::new(1.0, "[ch_us]/100", None),
            Atom::RamdensChainUS => Definition::new(100.0, "[ft_us]", None),
            Atom::LinkForRamdensChainUS => Definition::new(1.0, "[rch_us]/100", None),
            Atom::FathomUS => Definition::new(6.0, "[ft_us]", None),
            Atom::FurlongUS => Definition::new(40.0, "[rd_us]", None),
            Atom::MileUS => Definition::new(8.0, "[fur_us]", None),
            Atom::AcreUS => Definition::new(160.0, "[rd_us]2", None),
            Atom::SquareRodUS => Definition::new(1.0, "[rd_us]2", None),
            Atom::SquareMileUS => Definition::new(1.0, "[mi_us]2", None),
            Atom::Section => Definition::new(1.0, "[mi_us]2", None),
            Atom::Township => Definition::new(36.0, "[sct]", None),
            Atom::MilUS => Definition::new(0.001, "[in_us]", None),
            Atom::InchBritish => Definition::new(2.539998, "cm", None),
            Atom::FootBritish => Definition::new(12.0, "[in_br]", None),
            Atom::RodBritish => Definition::new(16.5, "[ft_br]", None),
            Atom::GuntersChainBritish => Definition::new(4.0, "[rd_br]", None),
            Atom::LinkForGuntersChainBritish => Definition::new(1.0, "[ch_br]/100", None),
            Atom::FathomBritish => Definition::new(6.0, "[ft_br]", None),
            Atom::PaceBritish => Definition::new(2.5, "[ft_br]", None),
            Atom::YardBritish => Definition::new(3.0, "[ft_br]", None),
            Atom::MileBritish => Definition::new(5280.0, "[ft_br]", None),
            Atom::NauticalMileBritish => Definition::new(6080.0, "[ft_br]", None),
            Atom::KnotBritish => Definition::new(1.0, "[nmi_br]/h", None),
            Atom::AcreBritish => Definition::new(4840.0, "[yd_br]2", None),
            Atom::QueenAnnesWineGallonUS => Definition::new(231.0, "[in_i]3", None),
            Atom::BarrelUS => Definition::new(42.0, "[gal_us]", None),
            Atom::QuartUS => Definition::new(1.0, "[gal_us]/4", None),
            Atom::PintUS => Definition::new(1.0, "[qt_us]/2", None),
            Atom::GillUS => Definition::new(1.0, "[pt_us]/4", None),
            Atom::FluidOunceUS => Definition::new(1.0, "[gil_us]/4", None),
            Atom::FluidDramUS => Definition::new(1.0, "[foz_us]/8", None),
            Atom::MinimUS => Definition::new(1.0, "[fdr_us]/60", None),
            Atom::CordUS => Definition::new(128.0, "[ft_i]3", None),
            Atom::BushelUS => Definition::new(2150.42, "[in_i]3", None),
            Atom::HistoricalWinchesterGallon => Definition::new(1.0, "[bu_us]/8", None),
            Atom::PeckUS => Definition::new(1.0, "[bu_us]/4", None),
            Atom::DryQuartUS => Definition::new(1.0, "[pk_us]/8", None),
            Atom::DryPintUS => Definition::new(1.0, "[dqt_us]/2", None),
            Atom::TablespoonUS => Definition::new(1.0, "[foz_us]/2", None),
            Atom::TeaspoonUS => Definition::new(1.0, "[tbs_us]/3", None),
            Atom::CupUS => Definition::new(16.0, "[tbs_us]", None),
            Atom::MetricFluidOunce => Definition::new(30.0, "mL", None),
            Atom::MetricCup => Definition::new(240.0, "mL", None),
            Atom::MetricTeaspoon => Definition::new(5.0, "mL", None),
            Atom::MetricTablespoon => Definition::new(15.0, "mL", None),
            Atom::GallonBritish => Definition::new(4.54609, "l", None),
            Atom::PeckBritish => Definition::new(2.0, "[gal_br]", None),
            Atom::BushelBritish => Definition::new(4.0, "[pk_br]", None),
            Atom::QuartBritish => Definition::new(1.0, "[gal_br]/4", None),
            Atom::PintBritish => Definition::new(1.0, "[qt_br]/2", None),
            Atom::GillBritish => Definition::new(1.0, "[pt_br]/4", None),
            Atom::FluidOunceBritish => Definition::new(1.0, "[gil_br]/5", None),
            Atom::FluidDramBritish => Definition::new(1.0, "[foz_br]/8", None),
            Atom::MinimBritish => Definition::new(1.0, "[fdr_br]/60", None),
            Atom::Grain => Definition::new(64.79891, "mg", None),
            Atom::PoundAvoirdupois => Definition::new(7000.0, "[gr]", None),
            Atom::OunceAvoirdupois => Definition::new(1.0, "[lb_av]/16", None),
            Atom::DramAvoirdupois => Definition::new(1.0, "[oz_av]/16", None),
            Atom::ShortHundredweightAvoirdupois => Definition::new(100.0, "[lb_av]", None),
            Atom::LongHunderdweightAvoirdupois => Definition::new(112.0, "[lb_av]", None),
            Atom::ShortTonAvoirdupois => Definition::new(20.0, "[scwt_av]", None),
            Atom::LongTonAvoirdupois => Definition::new(20.0, "[lcwt_av]", None),
            Atom::StoneAvoirdupois => Definition::new(14.0, "[lb_av]", None),
            Atom::PennyweightTroy => Definition::new(24.0, "[gr]", None),
            Atom::OunceTroy => Definition::new(20.0, "[pwt_tr]", None),
            Atom::PoundTroy => Definition::new(12.0, "[oz_tr]", None),
            Atom::ScrupleApothecaries => Definition::new(20.0, "[gr]", None),
            Atom::DramApothecaries => Definition::new(3.0, "[sc_ap]", None),
            Atom::OunceApothecaries => Definition::new(8.0, "[dr_ap]", None),
            Atom::PoundApothecaries => Definition::new(12.0, "[oz_ap]", None),
            Atom::MetricOunce => Definition::new(28.0, "g", None),
            Atom::Line => Definition::new(1.0, "[in_i]/12", None),
            Atom::Point => Definition::new(1.0, "[lne]/6", None),
            Atom::Pica => Definition::new(12.0, "[pnt]", None),
            Atom::PrintersPoint => Definition::new(0.013837, "[in_i]", None),
            Atom::PrintersPica => Definition::new(12.0, "[pnt_pr]", None),
            Atom::Pied => Definition::new(32.48, "cm", None),
            Atom::Pouce => Definition::new(1.0, "[pied]/12", None),
            Atom::Ligne => Definition::new(1.0, "[pouce]/12", None),
            Atom::Didot => Definition::new(1.0, "[ligne]/6", None),
            Atom::Cicero => Definition::new(12.0, "[didot]", None),
            Atom::DegreeFahrenheit => Definition::new(5.0, "K/9", Some(FunctionSet { convert_from: |value: f64| 9.0 * value / 5.0 - 459.67, convert_to: |value: f64| 5.0 / 9.0 * (value + 459.67) })),
            Atom::DegreeRankine => Definition::new(5.0, "K/9", None),
            Atom::DegreeReaumur => Definition::new(5.0, "K/4", Some(FunctionSet { convert_from: |value: f64| (value - 273.15) * 0.8, convert_to: |value: f64| (value / 0.8) + 273.15 })),
            Atom::CalorieAt15C => Definition::new(4.1858, "J", None),
            Atom::CalorieAt20C => Definition::new(4.1819, "J", None),
            Atom::MeanCalorie => Definition::new(4.19002, "J", None),
            Atom::InternationalTableCalorie => Definition::new(4.1868, "J", None),
            Atom::ThermochemicalCalorie => Definition::new(4.184, "J", None),
            Atom::Calorie => Definition::new(1.0, "cal_th", None),
            Atom::NutritionLabelCalories => Definition::new(1.0, "kcal_th", None),
            Atom::BritishThermalUnitAt39F => Definition::new(1.05967, "kJ", None),
            Atom::BritishThermalUnitAt59F => Definition::new(1.0548, "kJ", None),
            Atom::BritishThermalUnitAt60F => Definition::new(1.05468, "kJ", None),
            Atom::MeanBritishThermalUnit => Definition::new(1.05587, "kJ", None),
            Atom::InternationalTableBritishThermalUnit => Definition::new(1.05505585262, "kJ", None),
            Atom::ThermochemicalBritishThermalUnit => Definition::new(1.05435, "kJ", None),
            Atom::BritishThermalUnit => Definition::new(1.0, "[Btu_th]", None),
            Atom::Horsepower => Definition::new(550.0, "[ft_i].[lbf_av]/s", None),
            Atom::Tex => Definition::new(1.0, "g/km", None),
            Atom::Denier => Definition::new(1.0, "g/9/km", None),
            Atom::MeterOfWaterColumn => Definition::new(9.80665, "kPa", None),
            Atom::MeterOfMercuryColumn => Definition::new(133.322, "kPa", None),
            Atom::InchOfWaterColumn => Definition::new(1.0, "m[H2O].[in_i]/m", None),
            Atom::InchOfMercuryColumn => Definition::new(1.0, "m[Hg].[in_i]/m", None),
            Atom::PeripheralVascularResistanceUnit => Definition::new(1.0, "mm[Hg].s/ml", None),
            Atom::WoodUnit => Definition::new(1.0, "mm[Hg].min/L", None),
            Atom::Diopter => Definition::new(1.0, "/m", None),
            Atom::PrismDiopter => Definition::new(1.0, "rad", Some(FunctionSet { convert_from: |value: f64| (value / 100.0).atan(), convert_to: |value: f64| value.tan() * 100.0 })),
            Atom::PercentOfSlope => Definition::new(1.0, "deg", Some(FunctionSet { convert_from: |value: f64| (value / 100.0).atan(), convert_to: |value: f64| value.tan() * 100.0 })),
            Atom::MeshInternational => Definition::new(1.0, "/[in_i]", None),
            Atom::Charriere => Definition::new(1.0, "mm/3", None),
            Atom::Drop => Definition::new(1.0, "ml/20", None),
            Atom::HounsfieldUnit => Definition::new(1.0, "1", None),
            Atom::MetabolicEquivalent => Definition::new(3.5, "mL/min/kg", None),
            Atom::HomeopathicPotencyOfDecimalSeriesRetired => Definition::new(1.0, "1", Some(FunctionSet { convert_from: |value: f64| -value.log10(), convert_to: |value: f64| 10_f64.powf(-value) })),
            Atom::HomeopathicPotencyOfCentesimalSeriesRetired => Definition::new(1.0, "1", Some(FunctionSet { convert_from: |value: f64| -value.ln() / 100_f64.ln(), convert_to: |value: f64| 100_f64.powf(-value) })),
            Atom::HomeopathicPotencyOfMillesimalSeriesRetired => Definition::new(1.0, "1", Some(FunctionSet { convert_from: |value: f64| -value.ln() / 1_000_f64.ln(), convert_to: |value: f64| 1_000_f64.powf(-value) })),
            Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Definition::new(1.0, "1", Some(FunctionSet { convert_from: |value: f64| -value.ln() / 50_000_f64.ln(), convert_to: |value: f64| 50_000_f64.powf(-value) })),
            Atom::HomeopathicPotencyOfDecimalHahnemannianSeries => Definition::new(1.0, "1", None),
            Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries => Definition::new(1.0, "1", None),
            Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries => Definition::new(1.0, "1", None),
            Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => Definition::new(1.0, "1", None),
            Atom::HomeopathicPotencyOfDecimalKorsakovianSeries => Definition::new(1.0, "1", None),
            Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries => Definition::new(1.0, "1", None),
            Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries => Definition::new(1.0, "1", None),
            Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Definition::new(1.0, "1", None),
            Atom::Equivalents => Definition::new(1.0, "mol", None),
            Atom::Osmole => Definition::new(1.0, "mol", None),
            Atom::PH => Definition::new(1.0, "mol/l", Some(FunctionSet { convert_from: |value: f64| 10.0_f64.powf(-value), convert_to: |value: f64| -value.log10() })),
            Atom::GramPercent => Definition::new(1.0, "g/dl", None),
            Atom::SvedbergUnit => Definition::new(1.0, "10*-13.s", None),
            Atom::HighPowerField => Definition::new(1.0, "1", None),
            Atom::LowPowerField => Definition::new(100.0, "1", None),
            Atom::Katal => Definition::new(1.0, "mol/s", None),
            Atom::Unit => Definition::new(1.0, "umol/min", None),
            Atom::InternationalUnit => Definition::new(1.0, "1", None),
            Atom::InternationalUnitSecondary => Definition::new(1.0, "[iU]", None),
            Atom::ArbitaryUnit => Definition::new(1.0, "1", None),
            Atom::UnitedStatesPharmacopeiaUnit => Definition::new(1.0, "1", None),
            Atom::GplUnit => Definition::new(1.0, "1", None),
            Atom::MplUnit => Definition::new(1.0, "1", None),
            Atom::AplUnit => Definition::new(1.0, "1", None),
            Atom::BethesdaUnit => Definition::new(1.0, "1", None),
            Atom::AntiFactorXaUnit => Definition::new(1.0, "1", None),
            Atom::ToddUnit => Definition::new(1.0, "1", None),
            Atom::DyeUnit => Definition::new(1.0, "1", None),
            Atom::SomogyiUnit => Definition::new(1.0, "1", None),
            Atom::BodanskyUnit => Definition::new(1.0, "1", None),
            Atom::KingArmstrongUnit => Definition::new(1.0, "1", None),
            Atom::KunkelUnit => Definition::new(1.0, "1", None),
            Atom::MacLaganUnit => Definition::new(1.0, "1", None),
            Atom::TuberculinUnit => Definition::new(1.0, "1", None),
            Atom::CellCultureInfectiousDose => Definition::new(1.0, "1", None),
            Atom::TissueCultureInfectiousDose => Definition::new(1.0, "1", None),
            Atom::EmbryoInfectiousDose => Definition::new(1.0, "1", None),
            Atom::PlaqueFormingUnits => Definition::new(1.0, "1", None),
            Atom::FocusFormingUnits => Definition::new(1.0, "1", None),
            Atom::ColonyFormingUnits => Definition::new(1.0, "1", None),
            Atom::IndexOfReactivity => Definition::new(1.0, "1", None),
            Atom::BioequivalentAllergenUnit => Definition::new(1.0, "1", None),
            Atom::AllergenUnit => Definition::new(1.0, "1", None),
            Atom::AllergenUnitForAmbrosiaArtemisiifolia => Definition::new(1.0, "1", None),
            Atom::ProteinNitrogenUnit => Definition::new(1.0, "1", None),
            Atom::LimitOfFlocculation => Definition::new(1.0, "1", None),
            Atom::DAntigenUnit => Definition::new(1.0, "1", None),
            Atom::FibrinogenEquivalentUnit => Definition::new(1.0, "1", None),
            Atom::ElisaUnit => Definition::new(1.0, "1", None),
            Atom::EhrlichUnit => Definition::new(1.0, "1", None),
            Atom::Neper => Definition::new(1.0, "1", Some(FunctionSet { convert_from: |value: f64| value.ln(), convert_to: |value: f64| ::std::f64::consts::E.powf(value) })),
            Atom::Bel => Definition::new(1.0, "1", Some(FunctionSet { convert_from: |value: f64| value.log10(), convert_to: |value: f64| 10_f64.powf(value) })),
            Atom::BelSoundPressure => Definition::new(2.0, "10*-5.Pa", Some(FunctionSet { convert_from: |value: f64| 2.0 * value.log10(), convert_to: |value: f64| 10_f64.powf(value / 2.0) })),
            Atom::BelVolt => Definition::new(1.0, "V", Some(FunctionSet { convert_from: |value: f64| 2.0 * value.log10(), convert_to: |value: f64| 10_f64.powf(value / 2.0) })),
            Atom::BelMillivolt => Definition::new(1.0, "mV", Some(FunctionSet { convert_from: |value: f64| 2.0 * value.log10(), convert_to: |value: f64| 10_f64.powf(value / 2.0) })),
            Atom::BelMicrovolt => Definition::new(1.0, "uV", Some(FunctionSet { convert_from: |value: f64| 2.0 * value.log10(), convert_to: |value: f64| 10_f64.powf(value / 2.0) })),
            Atom::Bel10Nanovolt => Definition::new(10.0, "nV", Some(FunctionSet { convert_from: |value: f64| 2.0 * value.log10(), convert_to: |value: f64| 10_f64.powf(value / 2.0) })),
            Atom::BelWatt => Definition::new(1.0, "W", Some(FunctionSet { convert_from: |value: f64| value.log10(), convert_to: |value: f64| 10_f64.powf(value) })),
            Atom::BelKilowatt => Definition::new(1.0, "kW", Some(FunctionSet { convert_from: |value: f64| value.log10(), convert_to: |value: f64| 10_f64.powf(value) })),
            Atom::Stere => Definition::new(1.0, "m3", None),
            Atom::Angstrom => Definition::new(0.1, "nm", None),
            Atom::Barn => Definition::new(100.0, "fm2", None),
            Atom::TechnicalAtmosphere => Definition::new(1.0, "kgf/cm2", None),
            Atom::Mho => Definition::new(1.0, "S", None),
            Atom::PoundPerSqareInch => Definition::new(1.0, "[lbf_av]/[in_i]2", None),
            Atom::Circle => Definition::new(2.0, "[pi].rad", None),
            Atom::Spere => Definition::new(4.0, "[pi].sr", None),
            Atom::MetricCarat => Definition::new(0.2, "g", None),
            Atom::CaratOfGoldAlloys => Definition::new(1.0, "/24", None),
            Atom::Smoot => Definition::new(67.0, "[in_i]", None),
            Atom::MeterPerSquareSecondsPerSquareRootOfHertz => Definition::new(1.0, "m2/s4/Hz", Some(FunctionSet { convert_from: |value: f64| value.sqrt(), convert_to: |value: f64| value.powi(2) })),
            Atom::BitLogarithmusDualis => Definition::new(1.0, "1", Some(FunctionSet { convert_from: |value: f64| value.log2(), convert_to: |value: f64| 2_f64.powf(value) })),
            Atom::Bit => Definition::new(1.0, "1", None),
            Atom::Byte => Definition::new(8.0, "bit", None),
            Atom::Baud => Definition::new(1.0, "/s", None),
        };

        result.expect("BUG! Bad Atom -> Definition mapping!")
    }

    fn is_arbitrary(&self) -> bool {
        match *self {
            Atom::HomeopathicPotencyOfDecimalHahnemannianSeries => true,
            Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries => true,
            Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries => true,
            Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => true,
            Atom::HomeopathicPotencyOfDecimalKorsakovianSeries => true,
            Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries => true,
            Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries => true,
            Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => true,
            Atom::InternationalUnit => true,
            Atom::InternationalUnitSecondary => true,
            Atom::ArbitaryUnit => true,
            Atom::UnitedStatesPharmacopeiaUnit => true,
            Atom::GplUnit => true,
            Atom::MplUnit => true,
            Atom::AplUnit => true,
            Atom::BethesdaUnit => true,
            Atom::AntiFactorXaUnit => true,
            Atom::ToddUnit => true,
            Atom::DyeUnit => true,
            Atom::SomogyiUnit => true,
            Atom::BodanskyUnit => true,
            Atom::KingArmstrongUnit => true,
            Atom::KunkelUnit => true,
            Atom::MacLaganUnit => true,
            Atom::TuberculinUnit => true,
            Atom::CellCultureInfectiousDose => true,
            Atom::TissueCultureInfectiousDose => true,
            Atom::EmbryoInfectiousDose => true,
            Atom::PlaqueFormingUnits => true,
            Atom::FocusFormingUnits => true,
            Atom::ColonyFormingUnits => true,
            Atom::IndexOfReactivity => true,
            Atom::BioequivalentAllergenUnit => true,
            Atom::AllergenUnit => true,
            Atom::AllergenUnitForAmbrosiaArtemisiifolia => true,
            Atom::ProteinNitrogenUnit => true,
            Atom::LimitOfFlocculation => true,
            Atom::DAntigenUnit => true,
            Atom::FibrinogenEquivalentUnit => true,
            Atom::ElisaUnit => true,
            Atom::EhrlichUnit => true,
            _ => false,
        }
    }

    fn is_special(&self) -> bool {
        match *self {
            Atom::DegreeCelsius => true,
            Atom::DegreeFahrenheit => true,
            Atom::DegreeReaumur => true,
            Atom::PrismDiopter => true,
            Atom::PercentOfSlope => true,
            Atom::HomeopathicPotencyOfDecimalSeriesRetired => true,
            Atom::HomeopathicPotencyOfCentesimalSeriesRetired => true,
            Atom::HomeopathicPotencyOfMillesimalSeriesRetired => true,
            Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired => true,
            Atom::PH => true,
            Atom::Neper => true,
            Atom::Bel => true,
            Atom::BelSoundPressure => true,
            Atom::BelVolt => true,
            Atom::BelMillivolt => true,
            Atom::BelMicrovolt => true,
            Atom::Bel10Nanovolt => true,
            Atom::BelWatt => true,
            Atom::BelKilowatt => true,
            Atom::MeterPerSquareSecondsPerSquareRootOfHertz => true,
            Atom::BitLogarithmusDualis => true,
            _ => false,
        }
    }

    fn is_metric(&self) -> bool {
        match *self {
            Atom::Meter => true,
            Atom::Second => true,
            Atom::Gram => true,
            Atom::Radian => true,
            Atom::Kelvin => true,
            Atom::Coulomb => true,
            Atom::Candela => true,
            Atom::Mole => true,
            Atom::Steradian => true,
            Atom::Hertz => true,
            Atom::Newton => true,
            Atom::Pascal => true,
            Atom::Joule => true,
            Atom::Watt => true,
            Atom::Ampere => true,
            Atom::Volt => true,
            Atom::Farad => true,
            Atom::Ohm => true,
            Atom::Siemens => true,
            Atom::Weber => true,
            Atom::DegreeCelsius => true,
            Atom::Tesla => true,
            Atom::Henry => true,
            Atom::Lumen => true,
            Atom::Lux => true,
            Atom::Becquerel => true,
            Atom::Gray => true,
            Atom::Sievert => true,
            Atom::Liter => true,
            Atom::LiterSecondary => true,
            Atom::Are => true,
            Atom::Tonne => true,
            Atom::Bar => true,
            Atom::UnifiedAtomicMassUnit => true,
            Atom::Electronvolt => true,
            Atom::Parsec => true,
            Atom::VelocityOfLight => true,
            Atom::PlanckConstant => true,
            Atom::BoltzmannConstant => true,
            Atom::PermittivityOfVacuum => true,
            Atom::PermeabilityOfVacuum => true,
            Atom::ElementaryCharge => true,
            Atom::ElectronMass => true,
            Atom::ProtonMass => true,
            Atom::NewtonianConstantOfGravitation => true,
            Atom::StandardAccelerationOfFreeFall => true,
            Atom::LightYear => true,
            Atom::GramForce => true,
            Atom::Kayser => true,
            Atom::Gal => true,
            Atom::Dyne => true,
            Atom::Erg => true,
            Atom::Poise => true,
            Atom::Biot => true,
            Atom::Stokes => true,
            Atom::Maxwell => true,
            Atom::Gauss => true,
            Atom::Oersted => true,
            Atom::Gilbert => true,
            Atom::Stilb => true,
            Atom::Lambert => true,
            Atom::Phot => true,
            Atom::Curie => true,
            Atom::Roentgen => true,
            Atom::RadiationAbsorbedDose => true,
            Atom::RadiationEquivalentMan => true,
            Atom::CalorieAt15C => true,
            Atom::CalorieAt20C => true,
            Atom::MeanCalorie => true,
            Atom::InternationalTableCalorie => true,
            Atom::ThermochemicalCalorie => true,
            Atom::Calorie => true,
            Atom::Tex => true,
            Atom::MeterOfWaterColumn => true,
            Atom::MeterOfMercuryColumn => true,
            Atom::Equivalents => true,
            Atom::Osmole => true,
            Atom::GramPercent => true,
            Atom::Katal => true,
            Atom::Unit => true,
            Atom::InternationalUnit => true,
            Atom::InternationalUnitSecondary => true,
            Atom::Neper => true,
            Atom::Bel => true,
            Atom::BelSoundPressure => true,
            Atom::BelVolt => true,
            Atom::BelMillivolt => true,
            Atom::BelMicrovolt => true,
            Atom::Bel10Nanovolt => true,
            Atom::BelWatt => true,
            Atom::BelKilowatt => true,
            Atom::Stere => true,
            Atom::Mho => true,
            Atom::Bit => true,
            Atom::Byte => true,
            Atom::Baud => true,
            _ => false,
        }
    }

    fn names(&self) -> Vec<&'static str> {
        match *self {
            Atom::Meter => vec!["meter",],
            Atom::Second => vec!["second",],
            Atom::Gram => vec!["gram",],
            Atom::Radian => vec!["radian",],
            Atom::Kelvin => vec!["kelvin",],
            Atom::Coulomb => vec!["coulomb",],
            Atom::Candela => vec!["candela",],
            Atom::TheNumberTenForArbitraryPowersStar => vec!["the number ten for arbitrary powers",],
            Atom::TheNumberTenForArbitraryPowersCaret => vec!["the number ten for arbitrary powers",],
            Atom::TheNumberPi => vec!["the number pi",],
            Atom::Percent => vec!["percent",],
            Atom::PartsPerThousand => vec!["parts per thousand",],
            Atom::PartsPerMillion => vec!["parts per million",],
            Atom::PartsPerBillion => vec!["parts per billion",],
            Atom::PartsPerTrillion => vec!["parts per trillion",],
            Atom::Mole => vec!["mole",],
            Atom::Steradian => vec!["steradian",],
            Atom::Hertz => vec!["hertz",],
            Atom::Newton => vec!["newton",],
            Atom::Pascal => vec!["pascal",],
            Atom::Joule => vec!["joule",],
            Atom::Watt => vec!["watt",],
            Atom::Ampere => vec!["ampère",],
            Atom::Volt => vec!["volt",],
            Atom::Farad => vec!["farad",],
            Atom::Ohm => vec!["ohm",],
            Atom::Siemens => vec!["siemens",],
            Atom::Weber => vec!["weber",],
            Atom::DegreeCelsius => vec!["degree Celsius",],
            Atom::Tesla => vec!["tesla",],
            Atom::Henry => vec!["henry",],
            Atom::Lumen => vec!["lumen",],
            Atom::Lux => vec!["lux",],
            Atom::Becquerel => vec!["becquerel",],
            Atom::Gray => vec!["gray",],
            Atom::Sievert => vec!["sievert",],
            Atom::Gon => vec!["gon","grade",],
            Atom::Degree => vec!["degree",],
            Atom::MinuteAngle => vec!["minute",],
            Atom::SecondAngle => vec!["second",],
            Atom::Liter => vec!["liter",],
            Atom::LiterSecondary => vec!["liter",],
            Atom::Are => vec!["are",],
            Atom::Minute => vec!["minute",],
            Atom::Hour => vec!["hour",],
            Atom::Day => vec!["day",],
            Atom::TropicalYear => vec!["tropical year",],
            Atom::MeanJulianYear => vec!["mean Julian year",],
            Atom::MeanGregorianYear => vec!["mean Gregorian year",],
            Atom::Year => vec!["year",],
            Atom::Week => vec!["week",],
            Atom::SynodalMonth => vec!["synodal month",],
            Atom::MeanJulianMonth => vec!["mean Julian month",],
            Atom::MeanGregorianMonth => vec!["mean Gregorian month",],
            Atom::Month => vec!["month",],
            Atom::Tonne => vec!["tonne",],
            Atom::Bar => vec!["bar",],
            Atom::UnifiedAtomicMassUnit => vec!["unified atomic mass unit",],
            Atom::Electronvolt => vec!["electronvolt",],
            Atom::AstronomicUnit => vec!["astronomic unit",],
            Atom::Parsec => vec!["parsec",],
            Atom::VelocityOfLight => vec!["velocity of light",],
            Atom::PlanckConstant => vec!["Planck constant",],
            Atom::BoltzmannConstant => vec!["Boltzmann constant",],
            Atom::PermittivityOfVacuum => vec!["permittivity of vacuum",],
            Atom::PermeabilityOfVacuum => vec!["permeability of vacuum",],
            Atom::ElementaryCharge => vec!["elementary charge",],
            Atom::ElectronMass => vec!["electron mass",],
            Atom::ProtonMass => vec!["proton mass",],
            Atom::NewtonianConstantOfGravitation => vec!["Newtonian constant of gravitation",],
            Atom::StandardAccelerationOfFreeFall => vec!["standard acceleration of free fall",],
            Atom::StandardAtmosphere => vec!["standard atmosphere",],
            Atom::LightYear => vec!["light-year",],
            Atom::GramForce => vec!["gram-force",],
            Atom::PoundForceAvoirdupois => vec!["pound force",],
            Atom::Kayser => vec!["Kayser",],
            Atom::Gal => vec!["Gal",],
            Atom::Dyne => vec!["dyne",],
            Atom::Erg => vec!["erg",],
            Atom::Poise => vec!["Poise",],
            Atom::Biot => vec!["Biot",],
            Atom::Stokes => vec!["Stokes",],
            Atom::Maxwell => vec!["Maxwell",],
            Atom::Gauss => vec!["Gauss",],
            Atom::Oersted => vec!["Oersted",],
            Atom::Gilbert => vec!["Gilbert",],
            Atom::Stilb => vec!["stilb",],
            Atom::Lambert => vec!["Lambert",],
            Atom::Phot => vec!["phot",],
            Atom::Curie => vec!["Curie",],
            Atom::Roentgen => vec!["Roentgen",],
            Atom::RadiationAbsorbedDose => vec!["radiation absorbed dose",],
            Atom::RadiationEquivalentMan => vec!["radiation equivalent man",],
            Atom::InchInternational => vec!["inch",],
            Atom::FootInternational => vec!["foot",],
            Atom::YardInternational => vec!["yard",],
            Atom::MileInternational => vec!["mile",],
            Atom::FathomInternational => vec!["fathom",],
            Atom::NauticalMileInternational => vec!["nautical mile",],
            Atom::KnotInternational => vec!["knot",],
            Atom::SquareInchInternational => vec!["square inch",],
            Atom::SquareFootInternational => vec!["square foot",],
            Atom::SquareYardInternational => vec!["square yard",],
            Atom::CubicInchInternational => vec!["cubic inch",],
            Atom::CubicFootInternational => vec!["cubic foot",],
            Atom::CubicYardInternational => vec!["cubic yard",],
            Atom::BoardFootInternational => vec!["board foot",],
            Atom::CordInternational => vec!["cord",],
            Atom::MilInternational => vec!["mil",],
            Atom::CircularMilInternational => vec!["circular mil",],
            Atom::HandInternational => vec!["hand",],
            Atom::FootUS => vec!["foot",],
            Atom::YardUS => vec!["yard",],
            Atom::InchUS => vec!["inch",],
            Atom::RodUS => vec!["rod",],
            Atom::GuntersChainUS => vec!["Gunter's chain","Surveyor's chain",],
            Atom::LinkForGuntersChainUS => vec!["link for Gunter's chain",],
            Atom::RamdensChainUS => vec!["Ramden's chain","Engineer's chain",],
            Atom::LinkForRamdensChainUS => vec!["link for Ramden's chain",],
            Atom::FathomUS => vec!["fathom",],
            Atom::FurlongUS => vec!["furlong",],
            Atom::MileUS => vec!["mile",],
            Atom::AcreUS => vec!["acre",],
            Atom::SquareRodUS => vec!["square rod",],
            Atom::SquareMileUS => vec!["square mile",],
            Atom::Section => vec!["section",],
            Atom::Township => vec!["township",],
            Atom::MilUS => vec!["mil",],
            Atom::InchBritish => vec!["inch",],
            Atom::FootBritish => vec!["foot",],
            Atom::RodBritish => vec!["rod",],
            Atom::GuntersChainBritish => vec!["Gunter's chain",],
            Atom::LinkForGuntersChainBritish => vec!["link for Gunter's chain",],
            Atom::FathomBritish => vec!["fathom",],
            Atom::PaceBritish => vec!["pace",],
            Atom::YardBritish => vec!["yard",],
            Atom::MileBritish => vec!["mile",],
            Atom::NauticalMileBritish => vec!["nautical mile",],
            Atom::KnotBritish => vec!["knot",],
            Atom::AcreBritish => vec!["acre",],
            Atom::QueenAnnesWineGallonUS => vec!["Queen Anne's wine gallon",],
            Atom::BarrelUS => vec!["barrel",],
            Atom::QuartUS => vec!["quart",],
            Atom::PintUS => vec!["pint",],
            Atom::GillUS => vec!["gill",],
            Atom::FluidOunceUS => vec!["fluid ounce",],
            Atom::FluidDramUS => vec!["fluid dram",],
            Atom::MinimUS => vec!["minim",],
            Atom::CordUS => vec!["cord",],
            Atom::BushelUS => vec!["bushel",],
            Atom::HistoricalWinchesterGallon => vec!["historical winchester gallon",],
            Atom::PeckUS => vec!["peck",],
            Atom::DryQuartUS => vec!["dry quart",],
            Atom::DryPintUS => vec!["dry pint",],
            Atom::TablespoonUS => vec!["tablespoon",],
            Atom::TeaspoonUS => vec!["teaspoon",],
            Atom::CupUS => vec!["cup",],
            Atom::MetricFluidOunce => vec!["metric fluid ounce",],
            Atom::MetricCup => vec!["metric cup",],
            Atom::MetricTeaspoon => vec!["metric teaspoon",],
            Atom::MetricTablespoon => vec!["metric tablespoon",],
            Atom::GallonBritish => vec!["gallon",],
            Atom::PeckBritish => vec!["peck",],
            Atom::BushelBritish => vec!["bushel",],
            Atom::QuartBritish => vec!["quart",],
            Atom::PintBritish => vec!["pint",],
            Atom::GillBritish => vec!["gill",],
            Atom::FluidOunceBritish => vec!["fluid ounce",],
            Atom::FluidDramBritish => vec!["fluid dram",],
            Atom::MinimBritish => vec!["minim",],
            Atom::Grain => vec!["grain",],
            Atom::PoundAvoirdupois => vec!["pound",],
            Atom::OunceAvoirdupois => vec!["ounce",],
            Atom::DramAvoirdupois => vec!["dram",],
            Atom::ShortHundredweightAvoirdupois => vec!["short hundredweight","U.S. hundredweight",],
            Atom::LongHunderdweightAvoirdupois => vec!["long hunderdweight","British hundredweight",],
            Atom::ShortTonAvoirdupois => vec!["short ton","U.S. ton",],
            Atom::LongTonAvoirdupois => vec!["long ton","British ton",],
            Atom::StoneAvoirdupois => vec!["stone","British stone",],
            Atom::PennyweightTroy => vec!["pennyweight",],
            Atom::OunceTroy => vec!["ounce",],
            Atom::PoundTroy => vec!["pound",],
            Atom::ScrupleApothecaries => vec!["scruple",],
            Atom::DramApothecaries => vec!["dram","drachm",],
            Atom::OunceApothecaries => vec!["ounce",],
            Atom::PoundApothecaries => vec!["pound",],
            Atom::MetricOunce => vec!["metric ounce",],
            Atom::Line => vec!["line",],
            Atom::Point => vec!["point",],
            Atom::Pica => vec!["pica",],
            Atom::PrintersPoint => vec!["Printer's point",],
            Atom::PrintersPica => vec!["Printer's pica",],
            Atom::Pied => vec!["pied","French foot",],
            Atom::Pouce => vec!["pouce","French inch",],
            Atom::Ligne => vec!["ligne","French line",],
            Atom::Didot => vec!["didot","Didot's point",],
            Atom::Cicero => vec!["cicero","Didot's pica",],
            Atom::DegreeFahrenheit => vec!["degree Fahrenheit",],
            Atom::DegreeRankine => vec!["degree Rankine",],
            Atom::DegreeReaumur => vec!["degree Réaumur",],
            Atom::CalorieAt15C => vec!["calorie at 15 °C",],
            Atom::CalorieAt20C => vec!["calorie at 20 °C",],
            Atom::MeanCalorie => vec!["mean calorie",],
            Atom::InternationalTableCalorie => vec!["international table calorie",],
            Atom::ThermochemicalCalorie => vec!["thermochemical calorie",],
            Atom::Calorie => vec!["calorie",],
            Atom::NutritionLabelCalories => vec!["nutrition label Calories",],
            Atom::BritishThermalUnitAt39F => vec!["British thermal unit at 39 °F",],
            Atom::BritishThermalUnitAt59F => vec!["British thermal unit at 59 °F",],
            Atom::BritishThermalUnitAt60F => vec!["British thermal unit at 60 °F",],
            Atom::MeanBritishThermalUnit => vec!["mean British thermal unit",],
            Atom::InternationalTableBritishThermalUnit => vec!["international table British thermal unit",],
            Atom::ThermochemicalBritishThermalUnit => vec!["thermochemical British thermal unit",],
            Atom::BritishThermalUnit => vec!["British thermal unit",],
            Atom::Horsepower => vec!["horsepower",],
            Atom::Tex => vec!["tex",],
            Atom::Denier => vec!["Denier",],
            Atom::MeterOfWaterColumn => vec!["meter of water column",],
            Atom::MeterOfMercuryColumn => vec!["meter of mercury column",],
            Atom::InchOfWaterColumn => vec!["inch of water column",],
            Atom::InchOfMercuryColumn => vec!["inch of mercury column",],
            Atom::PeripheralVascularResistanceUnit => vec!["peripheral vascular resistance unit",],
            Atom::WoodUnit => vec!["Wood unit",],
            Atom::Diopter => vec!["diopter",],
            Atom::PrismDiopter => vec!["prism diopter",],
            Atom::PercentOfSlope => vec!["percent of slope",],
            Atom::MeshInternational => vec!["mesh",],
            Atom::Charriere => vec!["Charrière","french",],
            Atom::Drop => vec!["drop",],
            Atom::HounsfieldUnit => vec!["Hounsfield unit",],
            Atom::MetabolicEquivalent => vec!["metabolic equivalent",],
            Atom::HomeopathicPotencyOfDecimalSeriesRetired => vec!["homeopathic potency of decimal series (retired)",],
            Atom::HomeopathicPotencyOfCentesimalSeriesRetired => vec!["homeopathic potency of centesimal series (retired)",],
            Atom::HomeopathicPotencyOfMillesimalSeriesRetired => vec!["homeopathic potency of millesimal series (retired)",],
            Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired => vec!["homeopathic potency of quintamillesimal series (retired)",],
            Atom::HomeopathicPotencyOfDecimalHahnemannianSeries => vec!["homeopathic potency of decimal hahnemannian series",],
            Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries => vec!["homeopathic potency of centesimal hahnemannian series",],
            Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries => vec!["homeopathic potency of millesimal hahnemannian series",],
            Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => vec!["homeopathic potency of quintamillesimal hahnemannian series",],
            Atom::HomeopathicPotencyOfDecimalKorsakovianSeries => vec!["homeopathic potency of decimal korsakovian series",],
            Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries => vec!["homeopathic potency of centesimal korsakovian series",],
            Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries => vec!["homeopathic potency of millesimal korsakovian series",],
            Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => vec!["homeopathic potency of quintamillesimal korsakovian series",],
            Atom::Equivalents => vec!["equivalents",],
            Atom::Osmole => vec!["osmole",],
            Atom::PH => vec!["pH",],
            Atom::GramPercent => vec!["gram percent",],
            Atom::SvedbergUnit => vec!["Svedberg unit",],
            Atom::HighPowerField => vec!["high power field",],
            Atom::LowPowerField => vec!["low power field",],
            Atom::Katal => vec!["katal",],
            Atom::Unit => vec!["Unit",],
            Atom::InternationalUnit => vec!["international unit",],
            Atom::InternationalUnitSecondary => vec!["international unit",],
            Atom::ArbitaryUnit => vec!["arbitary unit",],
            Atom::UnitedStatesPharmacopeiaUnit => vec!["United States Pharmacopeia unit",],
            Atom::GplUnit => vec!["GPL unit",],
            Atom::MplUnit => vec!["MPL unit",],
            Atom::AplUnit => vec!["APL unit",],
            Atom::BethesdaUnit => vec!["Bethesda unit",],
            Atom::AntiFactorXaUnit => vec!["anti factor Xa unit",],
            Atom::ToddUnit => vec!["Todd unit",],
            Atom::DyeUnit => vec!["Dye unit",],
            Atom::SomogyiUnit => vec!["Somogyi unit",],
            Atom::BodanskyUnit => vec!["Bodansky unit",],
            Atom::KingArmstrongUnit => vec!["King-Armstrong unit",],
            Atom::KunkelUnit => vec!["Kunkel unit",],
            Atom::MacLaganUnit => vec!["Mac Lagan unit",],
            Atom::TuberculinUnit => vec!["tuberculin unit",],
            Atom::CellCultureInfectiousDose => vec!["50% cell culture infectious dose",],
            Atom::TissueCultureInfectiousDose => vec!["50% tissue culture infectious dose",],
            Atom::EmbryoInfectiousDose => vec!["50% embryo infectious dose",],
            Atom::PlaqueFormingUnits => vec!["plaque forming units",],
            Atom::FocusFormingUnits => vec!["focus forming units",],
            Atom::ColonyFormingUnits => vec!["colony forming units",],
            Atom::IndexOfReactivity => vec!["index of reactivity",],
            Atom::BioequivalentAllergenUnit => vec!["bioequivalent allergen unit",],
            Atom::AllergenUnit => vec!["allergen unit",],
            Atom::AllergenUnitForAmbrosiaArtemisiifolia => vec!["allergen unit for Ambrosia artemisiifolia",],
            Atom::ProteinNitrogenUnit => vec!["protein nitrogen unit",],
            Atom::LimitOfFlocculation => vec!["Limit of flocculation",],
            Atom::DAntigenUnit => vec!["D-antigen unit",],
            Atom::FibrinogenEquivalentUnit => vec!["fibrinogen equivalent unit",],
            Atom::ElisaUnit => vec!["ELISA unit",],
            Atom::EhrlichUnit => vec!["Ehrlich unit",],
            Atom::Neper => vec!["neper",],
            Atom::Bel => vec!["bel",],
            Atom::BelSoundPressure => vec!["bel sound pressure",],
            Atom::BelVolt => vec!["bel volt",],
            Atom::BelMillivolt => vec!["bel millivolt",],
            Atom::BelMicrovolt => vec!["bel microvolt",],
            Atom::Bel10Nanovolt => vec!["bel 10 nanovolt",],
            Atom::BelWatt => vec!["bel watt",],
            Atom::BelKilowatt => vec!["bel kilowatt",],
            Atom::Stere => vec!["stere",],
            Atom::Angstrom => vec!["Ångström",],
            Atom::Barn => vec!["barn",],
            Atom::TechnicalAtmosphere => vec!["technical atmosphere",],
            Atom::Mho => vec!["mho",],
            Atom::PoundPerSqareInch => vec!["pound per sqare inch",],
            Atom::Circle => vec!["circle",],
            Atom::Spere => vec!["spere",],
            Atom::MetricCarat => vec!["metric carat",],
            Atom::CaratOfGoldAlloys => vec!["carat of gold alloys",],
            Atom::Smoot => vec!["Smoot",],
            Atom::MeterPerSquareSecondsPerSquareRootOfHertz => vec!["meter per square seconds per square root of hertz",],
            Atom::BitLogarithmusDualis => vec!["bit",],
            Atom::Bit => vec!["bit",],
            Atom::Byte => vec!["byte",],
            Atom::Baud => vec!["baud",],
        }
    }

    fn primary_code(&self) -> &'static str {
        match *self {
            Atom::Meter => "m",
            Atom::Second => "s",
            Atom::Gram => "g",
            Atom::Radian => "rad",
            Atom::Kelvin => "K",
            Atom::Coulomb => "C",
            Atom::Candela => "cd",
            Atom::TheNumberTenForArbitraryPowersStar => "10*",
            Atom::TheNumberTenForArbitraryPowersCaret => "10^",
            Atom::TheNumberPi => "[pi]",
            Atom::Percent => "%",
            Atom::PartsPerThousand => "[ppth]",
            Atom::PartsPerMillion => "[ppm]",
            Atom::PartsPerBillion => "[ppb]",
            Atom::PartsPerTrillion => "[pptr]",
            Atom::Mole => "mol",
            Atom::Steradian => "sr",
            Atom::Hertz => "Hz",
            Atom::Newton => "N",
            Atom::Pascal => "Pa",
            Atom::Joule => "J",
            Atom::Watt => "W",
            Atom::Ampere => "A",
            Atom::Volt => "V",
            Atom::Farad => "F",
            Atom::Ohm => "Ohm",
            Atom::Siemens => "S",
            Atom::Weber => "Wb",
            Atom::DegreeCelsius => "Cel",
            Atom::Tesla => "T",
            Atom::Henry => "H",
            Atom::Lumen => "lm",
            Atom::Lux => "lx",
            Atom::Becquerel => "Bq",
            Atom::Gray => "Gy",
            Atom::Sievert => "Sv",
            Atom::Gon => "gon",
            Atom::Degree => "deg",
            Atom::MinuteAngle => "'",
            Atom::SecondAngle => "''",
            Atom::Liter => "l",
            Atom::LiterSecondary => "L",
            Atom::Are => "ar",
            Atom::Minute => "min",
            Atom::Hour => "h",
            Atom::Day => "d",
            Atom::TropicalYear => "a_t",
            Atom::MeanJulianYear => "a_j",
            Atom::MeanGregorianYear => "a_g",
            Atom::Year => "a",
            Atom::Week => "wk",
            Atom::SynodalMonth => "mo_s",
            Atom::MeanJulianMonth => "mo_j",
            Atom::MeanGregorianMonth => "mo_g",
            Atom::Month => "mo",
            Atom::Tonne => "t",
            Atom::Bar => "bar",
            Atom::UnifiedAtomicMassUnit => "u",
            Atom::Electronvolt => "eV",
            Atom::AstronomicUnit => "AU",
            Atom::Parsec => "pc",
            Atom::VelocityOfLight => "[c]",
            Atom::PlanckConstant => "[h]",
            Atom::BoltzmannConstant => "[k]",
            Atom::PermittivityOfVacuum => "[eps_0]",
            Atom::PermeabilityOfVacuum => "[mu_0]",
            Atom::ElementaryCharge => "[e]",
            Atom::ElectronMass => "[m_e]",
            Atom::ProtonMass => "[m_p]",
            Atom::NewtonianConstantOfGravitation => "[G]",
            Atom::StandardAccelerationOfFreeFall => "[g]",
            Atom::StandardAtmosphere => "atm",
            Atom::LightYear => "[ly]",
            Atom::GramForce => "gf",
            Atom::PoundForceAvoirdupois => "[lbf_av]",
            Atom::Kayser => "Ky",
            Atom::Gal => "Gal",
            Atom::Dyne => "dyn",
            Atom::Erg => "erg",
            Atom::Poise => "P",
            Atom::Biot => "Bi",
            Atom::Stokes => "St",
            Atom::Maxwell => "Mx",
            Atom::Gauss => "G",
            Atom::Oersted => "Oe",
            Atom::Gilbert => "Gb",
            Atom::Stilb => "sb",
            Atom::Lambert => "Lmb",
            Atom::Phot => "ph",
            Atom::Curie => "Ci",
            Atom::Roentgen => "R",
            Atom::RadiationAbsorbedDose => "RAD",
            Atom::RadiationEquivalentMan => "REM",
            Atom::InchInternational => "[in_i]",
            Atom::FootInternational => "[ft_i]",
            Atom::YardInternational => "[yd_i]",
            Atom::MileInternational => "[mi_i]",
            Atom::FathomInternational => "[fth_i]",
            Atom::NauticalMileInternational => "[nmi_i]",
            Atom::KnotInternational => "[kn_i]",
            Atom::SquareInchInternational => "[sin_i]",
            Atom::SquareFootInternational => "[sft_i]",
            Atom::SquareYardInternational => "[syd_i]",
            Atom::CubicInchInternational => "[cin_i]",
            Atom::CubicFootInternational => "[cft_i]",
            Atom::CubicYardInternational => "[cyd_i]",
            Atom::BoardFootInternational => "[bf_i]",
            Atom::CordInternational => "[cr_i]",
            Atom::MilInternational => "[mil_i]",
            Atom::CircularMilInternational => "[cml_i]",
            Atom::HandInternational => "[hd_i]",
            Atom::FootUS => "[ft_us]",
            Atom::YardUS => "[yd_us]",
            Atom::InchUS => "[in_us]",
            Atom::RodUS => "[rd_us]",
            Atom::GuntersChainUS => "[ch_us]",
            Atom::LinkForGuntersChainUS => "[lk_us]",
            Atom::RamdensChainUS => "[rch_us]",
            Atom::LinkForRamdensChainUS => "[rlk_us]",
            Atom::FathomUS => "[fth_us]",
            Atom::FurlongUS => "[fur_us]",
            Atom::MileUS => "[mi_us]",
            Atom::AcreUS => "[acr_us]",
            Atom::SquareRodUS => "[srd_us]",
            Atom::SquareMileUS => "[smi_us]",
            Atom::Section => "[sct]",
            Atom::Township => "[twp]",
            Atom::MilUS => "[mil_us]",
            Atom::InchBritish => "[in_br]",
            Atom::FootBritish => "[ft_br]",
            Atom::RodBritish => "[rd_br]",
            Atom::GuntersChainBritish => "[ch_br]",
            Atom::LinkForGuntersChainBritish => "[lk_br]",
            Atom::FathomBritish => "[fth_br]",
            Atom::PaceBritish => "[pc_br]",
            Atom::YardBritish => "[yd_br]",
            Atom::MileBritish => "[mi_br]",
            Atom::NauticalMileBritish => "[nmi_br]",
            Atom::KnotBritish => "[kn_br]",
            Atom::AcreBritish => "[acr_br]",
            Atom::QueenAnnesWineGallonUS => "[gal_us]",
            Atom::BarrelUS => "[bbl_us]",
            Atom::QuartUS => "[qt_us]",
            Atom::PintUS => "[pt_us]",
            Atom::GillUS => "[gil_us]",
            Atom::FluidOunceUS => "[foz_us]",
            Atom::FluidDramUS => "[fdr_us]",
            Atom::MinimUS => "[min_us]",
            Atom::CordUS => "[crd_us]",
            Atom::BushelUS => "[bu_us]",
            Atom::HistoricalWinchesterGallon => "[gal_wi]",
            Atom::PeckUS => "[pk_us]",
            Atom::DryQuartUS => "[dqt_us]",
            Atom::DryPintUS => "[dpt_us]",
            Atom::TablespoonUS => "[tbs_us]",
            Atom::TeaspoonUS => "[tsp_us]",
            Atom::CupUS => "[cup_us]",
            Atom::MetricFluidOunce => "[foz_m]",
            Atom::MetricCup => "[cup_m]",
            Atom::MetricTeaspoon => "[tsp_m]",
            Atom::MetricTablespoon => "[tbs_m]",
            Atom::GallonBritish => "[gal_br]",
            Atom::PeckBritish => "[pk_br]",
            Atom::BushelBritish => "[bu_br]",
            Atom::QuartBritish => "[qt_br]",
            Atom::PintBritish => "[pt_br]",
            Atom::GillBritish => "[gil_br]",
            Atom::FluidOunceBritish => "[foz_br]",
            Atom::FluidDramBritish => "[fdr_br]",
            Atom::MinimBritish => "[min_br]",
            Atom::Grain => "[gr]",
            Atom::PoundAvoirdupois => "[lb_av]",
            Atom::OunceAvoirdupois => "[oz_av]",
            Atom::DramAvoirdupois => "[dr_av]",
            Atom::ShortHundredweightAvoirdupois => "[scwt_av]",
            Atom::LongHunderdweightAvoirdupois => "[lcwt_av]",
            Atom::ShortTonAvoirdupois => "[ston_av]",
            Atom::LongTonAvoirdupois => "[lton_av]",
            Atom::StoneAvoirdupois => "[stone_av]",
            Atom::PennyweightTroy => "[pwt_tr]",
            Atom::OunceTroy => "[oz_tr]",
            Atom::PoundTroy => "[lb_tr]",
            Atom::ScrupleApothecaries => "[sc_ap]",
            Atom::DramApothecaries => "[dr_ap]",
            Atom::OunceApothecaries => "[oz_ap]",
            Atom::PoundApothecaries => "[lb_ap]",
            Atom::MetricOunce => "[oz_m]",
            Atom::Line => "[lne]",
            Atom::Point => "[pnt]",
            Atom::Pica => "[pca]",
            Atom::PrintersPoint => "[pnt_pr]",
            Atom::PrintersPica => "[pca_pr]",
            Atom::Pied => "[pied]",
            Atom::Pouce => "[pouce]",
            Atom::Ligne => "[ligne]",
            Atom::Didot => "[didot]",
            Atom::Cicero => "[cicero]",
            Atom::DegreeFahrenheit => "[degF]",
            Atom::DegreeRankine => "[degR]",
            Atom::DegreeReaumur => "[degRe]",
            Atom::CalorieAt15C => "cal_[15]",
            Atom::CalorieAt20C => "cal_[20]",
            Atom::MeanCalorie => "cal_m",
            Atom::InternationalTableCalorie => "cal_IT",
            Atom::ThermochemicalCalorie => "cal_th",
            Atom::Calorie => "cal",
            Atom::NutritionLabelCalories => "[Cal]",
            Atom::BritishThermalUnitAt39F => "[Btu_39]",
            Atom::BritishThermalUnitAt59F => "[Btu_59]",
            Atom::BritishThermalUnitAt60F => "[Btu_60]",
            Atom::MeanBritishThermalUnit => "[Btu_m]",
            Atom::InternationalTableBritishThermalUnit => "[Btu_IT]",
            Atom::ThermochemicalBritishThermalUnit => "[Btu_th]",
            Atom::BritishThermalUnit => "[Btu]",
            Atom::Horsepower => "[HP]",
            Atom::Tex => "tex",
            Atom::Denier => "[den]",
            Atom::MeterOfWaterColumn => "m[H2O]",
            Atom::MeterOfMercuryColumn => "m[Hg]",
            Atom::InchOfWaterColumn => "[in_i'H2O]",
            Atom::InchOfMercuryColumn => "[in_i'Hg]",
            Atom::PeripheralVascularResistanceUnit => "[PRU]",
            Atom::WoodUnit => "[wood'U]",
            Atom::Diopter => "[diop]",
            Atom::PrismDiopter => "[p'diop]",
            Atom::PercentOfSlope => "%[slope]",
            Atom::MeshInternational => "[mesh_i]",
            Atom::Charriere => "[Ch]",
            Atom::Drop => "[drp]",
            Atom::HounsfieldUnit => "[hnsf'U]",
            Atom::MetabolicEquivalent => "[MET]",
            Atom::HomeopathicPotencyOfDecimalSeriesRetired => "[hp'_X]",
            Atom::HomeopathicPotencyOfCentesimalSeriesRetired => "[hp'_C]",
            Atom::HomeopathicPotencyOfMillesimalSeriesRetired => "[hp'_M]",
            Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired => "[hp'_Q]",
            Atom::HomeopathicPotencyOfDecimalHahnemannianSeries => "[hp_X]",
            Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries => "[hp_C]",
            Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries => "[hp_M]",
            Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => "[hp_Q]",
            Atom::HomeopathicPotencyOfDecimalKorsakovianSeries => "[kp_X]",
            Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries => "[kp_C]",
            Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries => "[kp_M]",
            Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => "[kp_Q]",
            Atom::Equivalents => "eq",
            Atom::Osmole => "osm",
            Atom::PH => "[pH]",
            Atom::GramPercent => "g%",
            Atom::SvedbergUnit => "[S]",
            Atom::HighPowerField => "[HPF]",
            Atom::LowPowerField => "[LPF]",
            Atom::Katal => "kat",
            Atom::Unit => "U",
            Atom::InternationalUnit => "[iU]",
            Atom::InternationalUnitSecondary => "[IU]",
            Atom::ArbitaryUnit => "[arb'U]",
            Atom::UnitedStatesPharmacopeiaUnit => "[USP'U]",
            Atom::GplUnit => "[GPL'U]",
            Atom::MplUnit => "[MPL'U]",
            Atom::AplUnit => "[APL'U]",
            Atom::BethesdaUnit => "[beth'U]",
            Atom::AntiFactorXaUnit => "[anti'Xa'U]",
            Atom::ToddUnit => "[todd'U]",
            Atom::DyeUnit => "[dye'U]",
            Atom::SomogyiUnit => "[smgy'U]",
            Atom::BodanskyUnit => "[bdsk'U]",
            Atom::KingArmstrongUnit => "[ka'U]",
            Atom::KunkelUnit => "[knk'U]",
            Atom::MacLaganUnit => "[mclg'U]",
            Atom::TuberculinUnit => "[tb'U]",
            Atom::CellCultureInfectiousDose => "[CCID_50]",
            Atom::TissueCultureInfectiousDose => "[TCID_50]",
            Atom::EmbryoInfectiousDose => "[EID_50]",
            Atom::PlaqueFormingUnits => "[PFU]",
            Atom::FocusFormingUnits => "[FFU]",
            Atom::ColonyFormingUnits => "[CFU]",
            Atom::IndexOfReactivity => "[IR]",
            Atom::BioequivalentAllergenUnit => "[BAU]",
            Atom::AllergenUnit => "[AU]",
            Atom::AllergenUnitForAmbrosiaArtemisiifolia => "[Amb'a'1'U]",
            Atom::ProteinNitrogenUnit => "[PNU]",
            Atom::LimitOfFlocculation => "[Lf]",
            Atom::DAntigenUnit => "[D'ag'U]",
            Atom::FibrinogenEquivalentUnit => "[FEU]",
            Atom::ElisaUnit => "[ELU]",
            Atom::EhrlichUnit => "[EU]",
            Atom::Neper => "Np",
            Atom::Bel => "B",
            Atom::BelSoundPressure => "B[SPL]",
            Atom::BelVolt => "B[V]",
            Atom::BelMillivolt => "B[mV]",
            Atom::BelMicrovolt => "B[uV]",
            Atom::Bel10Nanovolt => "B[10.nV]",
            Atom::BelWatt => "B[W]",
            Atom::BelKilowatt => "B[kW]",
            Atom::Stere => "st",
            Atom::Angstrom => "Ao",
            Atom::Barn => "b",
            Atom::TechnicalAtmosphere => "att",
            Atom::Mho => "mho",
            Atom::PoundPerSqareInch => "[psi]",
            Atom::Circle => "circ",
            Atom::Spere => "sph",
            Atom::MetricCarat => "[car_m]",
            Atom::CaratOfGoldAlloys => "[car_Au]",
            Atom::Smoot => "[smoot]",
            Atom::MeterPerSquareSecondsPerSquareRootOfHertz => "[m/s2/Hz^(1/2)]",
            Atom::BitLogarithmusDualis => "bit_s",
            Atom::Bit => "bit",
            Atom::Byte => "By",
            Atom::Baud => "Bd",
        }
    }

    fn print_symbol(&self) -> Option<&'static str> {
        match *self {
            Atom::Meter => Some("m"),
            Atom::Second => Some("s"),
            Atom::Gram => Some("g"),
            Atom::Radian => Some("rad"),
            Atom::Kelvin => Some("K"),
            Atom::Coulomb => Some("C"),
            Atom::Candela => Some("cd"),
            Atom::TheNumberTenForArbitraryPowersStar => Some("10"),
            Atom::TheNumberTenForArbitraryPowersCaret => Some("10"),
            Atom::TheNumberPi => Some("π"),
            Atom::Percent => Some("%"),
            Atom::PartsPerThousand => Some("ppth"),
            Atom::PartsPerMillion => Some("ppm"),
            Atom::PartsPerBillion => Some("ppb"),
            Atom::PartsPerTrillion => Some("pptr"),
            Atom::Mole => Some("mol"),
            Atom::Steradian => Some("sr"),
            Atom::Hertz => Some("Hz"),
            Atom::Newton => Some("N"),
            Atom::Pascal => Some("Pa"),
            Atom::Joule => Some("J"),
            Atom::Watt => Some("W"),
            Atom::Ampere => Some("A"),
            Atom::Volt => Some("V"),
            Atom::Farad => Some("F"),
            Atom::Ohm => Some("Ω"),
            Atom::Siemens => Some("S"),
            Atom::Weber => Some("Wb"),
            Atom::DegreeCelsius => Some("°C"),
            Atom::Tesla => Some("T"),
            Atom::Henry => Some("H"),
            Atom::Lumen => Some("lm"),
            Atom::Lux => Some("lx"),
            Atom::Becquerel => Some("Bq"),
            Atom::Gray => Some("Gy"),
            Atom::Sievert => Some("Sv"),
            Atom::Gon => Some("□<sup>g</sup>"),
            Atom::Degree => Some("°"),
            Atom::MinuteAngle => Some("'"),
            Atom::SecondAngle => Some("''"),
            Atom::Liter => Some("l"),
            Atom::LiterSecondary => Some("L"),
            Atom::Are => Some("a"),
            Atom::Minute => Some("min"),
            Atom::Hour => Some("h"),
            Atom::Day => Some("d"),
            Atom::TropicalYear => Some("a<sub>t</sub>"),
            Atom::MeanJulianYear => Some("a<sub>j</sub>"),
            Atom::MeanGregorianYear => Some("a<sub>g</sub>"),
            Atom::Year => Some("a"),
            Atom::Week => Some("wk"),
            Atom::SynodalMonth => Some("mo<sub>s</sub>"),
            Atom::MeanJulianMonth => Some("mo<sub>j</sub>"),
            Atom::MeanGregorianMonth => Some("mo<sub>g</sub>"),
            Atom::Month => Some("mo"),
            Atom::Tonne => Some("t"),
            Atom::Bar => Some("bar"),
            Atom::UnifiedAtomicMassUnit => Some("u"),
            Atom::Electronvolt => Some("eV"),
            Atom::AstronomicUnit => Some("AU"),
            Atom::Parsec => Some("pc"),
            Atom::VelocityOfLight => Some("<i>c</i>"),
            Atom::PlanckConstant => Some("<i>h</i>"),
            Atom::BoltzmannConstant => Some("<i>k</i>"),
            Atom::PermittivityOfVacuum => Some("<i>ε<sub><r>0</r></sub></i>"),
            Atom::PermeabilityOfVacuum => Some("<i>μ<sub><r>0</r></sub></i>"),
            Atom::ElementaryCharge => Some("<i>e</i>"),
            Atom::ElectronMass => Some("<i>m<sub><r>e</r></sub></i>"),
            Atom::ProtonMass => Some("<i>m<sub><r>p</r></sub></i>"),
            Atom::NewtonianConstantOfGravitation => Some("<i>G</i>"),
            Atom::StandardAccelerationOfFreeFall => Some("<i>g<sub>n</sub></i>"),
            Atom::StandardAtmosphere => Some("atm"),
            Atom::LightYear => Some("l.y."),
            Atom::GramForce => Some("gf"),
            Atom::PoundForceAvoirdupois => Some("lbf"),
            Atom::Kayser => Some("K"),
            Atom::Gal => Some("Gal"),
            Atom::Dyne => Some("dyn"),
            Atom::Erg => Some("erg"),
            Atom::Poise => Some("P"),
            Atom::Biot => Some("Bi"),
            Atom::Stokes => Some("St"),
            Atom::Maxwell => Some("Mx"),
            Atom::Gauss => Some("Gs"),
            Atom::Oersted => Some("Oe"),
            Atom::Gilbert => Some("Gb"),
            Atom::Stilb => Some("sb"),
            Atom::Lambert => Some("L"),
            Atom::Phot => Some("ph"),
            Atom::Curie => Some("Ci"),
            Atom::Roentgen => Some("R"),
            Atom::RadiationAbsorbedDose => Some("RAD"),
            Atom::RadiationEquivalentMan => Some("REM"),
            Atom::InchInternational => Some("in"),
            Atom::FootInternational => Some("ft"),
            Atom::YardInternational => Some("yd"),
            Atom::MileInternational => Some("mi"),
            Atom::FathomInternational => Some("fth"),
            Atom::NauticalMileInternational => Some("n.mi"),
            Atom::KnotInternational => Some("knot"),
            Atom::CubicYardInternational => Some("cu.yd"),
            Atom::MilInternational => Some("mil"),
            Atom::CircularMilInternational => Some("circ.mil"),
            Atom::HandInternational => Some("hd"),
            Atom::FootUS => Some("ft<sub>us</sub>"),
            Atom::FluidOunceUS => Some("oz fl"),
            Atom::MetricFluidOunce => Some("oz fl"),
            Atom::PoundAvoirdupois => Some("lb"),
            Atom::OunceAvoirdupois => Some("oz"),
            Atom::DegreeFahrenheit => Some("°F"),
            Atom::DegreeRankine => Some("°R"),
            Atom::DegreeReaumur => Some("°Ré"),
            Atom::CalorieAt15C => Some("cal<sub>15°C</sub>"),
            Atom::CalorieAt20C => Some("cal<sub>20°C</sub>"),
            Atom::MeanCalorie => Some("cal<sub>m</sub>"),
            Atom::InternationalTableCalorie => Some("cal<sub>IT</sub>"),
            Atom::ThermochemicalCalorie => Some("cal<sub>th</sub>"),
            Atom::Calorie => Some("cal"),
            Atom::NutritionLabelCalories => Some("Cal"),
            Atom::BritishThermalUnitAt39F => Some("Btu<sub>39°F</sub>"),
            Atom::BritishThermalUnitAt59F => Some("Btu<sub>59°F</sub>"),
            Atom::BritishThermalUnitAt60F => Some("Btu<sub>60°F</sub>"),
            Atom::MeanBritishThermalUnit => Some("Btu<sub>m</sub>"),
            Atom::InternationalTableBritishThermalUnit => Some("Btu<sub>IT</sub>"),
            Atom::ThermochemicalBritishThermalUnit => Some("Btu<sub>th</sub>"),
            Atom::BritishThermalUnit => Some("btu"),
            Atom::Tex => Some("tex"),
            Atom::Denier => Some("den"),
            Atom::MeterOfWaterColumn => Some("m H<sub><r>2</r></sub>O"),
            Atom::MeterOfMercuryColumn => Some("m Hg"),
            Atom::InchOfWaterColumn => Some("in H<sub><r>2</r></sub>O"),
            Atom::InchOfMercuryColumn => Some("in Hg"),
            Atom::PeripheralVascularResistanceUnit => Some("P.R.U."),
            Atom::WoodUnit => Some("Wood U."),
            Atom::Diopter => Some("dpt"),
            Atom::PrismDiopter => Some("PD"),
            Atom::PercentOfSlope => Some("%"),
            Atom::Charriere => Some("Ch"),
            Atom::Drop => Some("drp"),
            Atom::HounsfieldUnit => Some("HF"),
            Atom::MetabolicEquivalent => Some("MET"),
            Atom::HomeopathicPotencyOfDecimalSeriesRetired => Some("X"),
            Atom::HomeopathicPotencyOfCentesimalSeriesRetired => Some("C"),
            Atom::HomeopathicPotencyOfMillesimalSeriesRetired => Some("M"),
            Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Some("Q"),
            Atom::HomeopathicPotencyOfDecimalHahnemannianSeries => Some("X"),
            Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries => Some("C"),
            Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries => Some("M"),
            Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => Some("Q"),
            Atom::HomeopathicPotencyOfDecimalKorsakovianSeries => Some("X"),
            Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries => Some("C"),
            Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries => Some("M"),
            Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Some("Q"),
            Atom::Equivalents => Some("eq"),
            Atom::Osmole => Some("osm"),
            Atom::PH => Some("pH"),
            Atom::GramPercent => Some("g%"),
            Atom::SvedbergUnit => Some("S"),
            Atom::HighPowerField => Some("HPF"),
            Atom::LowPowerField => Some("LPF"),
            Atom::Katal => Some("kat"),
            Atom::Unit => Some("U"),
            Atom::InternationalUnit => Some("IU"),
            Atom::InternationalUnitSecondary => Some("i.U."),
            Atom::ArbitaryUnit => Some("arb. U"),
            Atom::UnitedStatesPharmacopeiaUnit => Some("U.S.P."),
            Atom::CellCultureInfectiousDose => Some("CCID<sub>50</sub>"),
            Atom::TissueCultureInfectiousDose => Some("TCID<sub>50</sub>"),
            Atom::EmbryoInfectiousDose => Some("EID<sub>50</sub>"),
            Atom::PlaqueFormingUnits => Some("PFU"),
            Atom::FocusFormingUnits => Some("FFU"),
            Atom::ColonyFormingUnits => Some("CFU"),
            Atom::IndexOfReactivity => Some("IR"),
            Atom::BioequivalentAllergenUnit => Some("BAU"),
            Atom::AllergenUnit => Some("AU"),
            Atom::AllergenUnitForAmbrosiaArtemisiifolia => Some("Amb a 1 U"),
            Atom::ProteinNitrogenUnit => Some("PNU"),
            Atom::LimitOfFlocculation => Some("Lf"),
            Atom::Neper => Some("Np"),
            Atom::Bel => Some("B"),
            Atom::BelSoundPressure => Some("B(SPL)"),
            Atom::BelVolt => Some("B(V)"),
            Atom::BelMillivolt => Some("B(mV)"),
            Atom::BelMicrovolt => Some("B(μV)"),
            Atom::Bel10Nanovolt => Some("B(10 nV)"),
            Atom::BelWatt => Some("B(W)"),
            Atom::BelKilowatt => Some("B(kW)"),
            Atom::Stere => Some("st"),
            Atom::Angstrom => Some("Å"),
            Atom::Barn => Some("b"),
            Atom::TechnicalAtmosphere => Some("at"),
            Atom::Mho => Some("mho"),
            Atom::PoundPerSqareInch => Some("psi"),
            Atom::Circle => Some("circ"),
            Atom::Spere => Some("sph"),
            Atom::MetricCarat => Some("ct<sub>m</sub>"),
            Atom::CaratOfGoldAlloys => Some("ct<sub><r>Au</r></sub>"),
            Atom::BitLogarithmusDualis => Some("bit<sub>s</sub>"),
            Atom::Bit => Some("bit"),
            Atom::Byte => Some("B"),
            Atom::Baud => Some("Bd"),
            _ => None,
        }
    }

    fn property(&self) -> Property {
        match *self {
            Atom::Meter => Property::Length,
            Atom::Second => Property::Time,
            Atom::Gram => Property::Mass,
            Atom::Radian => Property::PlaneAngle,
            Atom::Kelvin => Property::Temperature,
            Atom::Coulomb => Property::ElectricCharge,
            Atom::Candela => Property::LuminousIntensity,
            Atom::TheNumberTenForArbitraryPowersStar => Property::Number,
            Atom::TheNumberTenForArbitraryPowersCaret => Property::Number,
            Atom::TheNumberPi => Property::Number,
            Atom::Percent => Property::Fraction,
            Atom::PartsPerThousand => Property::Fraction,
            Atom::PartsPerMillion => Property::Fraction,
            Atom::PartsPerBillion => Property::Fraction,
            Atom::PartsPerTrillion => Property::Fraction,
            Atom::Mole => Property::AmountOfSubstance,
            Atom::Steradian => Property::SolidAngle,
            Atom::Hertz => Property::Frequency,
            Atom::Newton => Property::Force,
            Atom::Pascal => Property::Pressure,
            Atom::Joule => Property::Energy,
            Atom::Watt => Property::Power,
            Atom::Ampere => Property::ElectricCurrent,
            Atom::Volt => Property::ElectricPotential,
            Atom::Farad => Property::ElectricCapacitance,
            Atom::Ohm => Property::ElectricResistance,
            Atom::Siemens => Property::ElectricConductance,
            Atom::Weber => Property::MagneticFlux,
            Atom::DegreeCelsius => Property::Temperature,
            Atom::Tesla => Property::MagneticFluxDensity,
            Atom::Henry => Property::Inductance,
            Atom::Lumen => Property::LuminousFlux,
            Atom::Lux => Property::Illuminance,
            Atom::Becquerel => Property::Radioactivity,
            Atom::Gray => Property::EnergyDose,
            Atom::Sievert => Property::DoseEquivalent,
            Atom::Gon => Property::PlaneAngle,
            Atom::Degree => Property::PlaneAngle,
            Atom::MinuteAngle => Property::PlaneAngle,
            Atom::SecondAngle => Property::PlaneAngle,
            Atom::Liter => Property::Volume,
            Atom::LiterSecondary => Property::Volume,
            Atom::Are => Property::Area,
            Atom::Minute => Property::Time,
            Atom::Hour => Property::Time,
            Atom::Day => Property::Time,
            Atom::TropicalYear => Property::Time,
            Atom::MeanJulianYear => Property::Time,
            Atom::MeanGregorianYear => Property::Time,
            Atom::Year => Property::Time,
            Atom::Week => Property::Time,
            Atom::SynodalMonth => Property::Time,
            Atom::MeanJulianMonth => Property::Time,
            Atom::MeanGregorianMonth => Property::Time,
            Atom::Month => Property::Time,
            Atom::Tonne => Property::Mass,
            Atom::Bar => Property::Pressure,
            Atom::UnifiedAtomicMassUnit => Property::Mass,
            Atom::Electronvolt => Property::Energy,
            Atom::AstronomicUnit => Property::Length,
            Atom::Parsec => Property::Length,
            Atom::VelocityOfLight => Property::Velocity,
            Atom::PlanckConstant => Property::Action,
            Atom::BoltzmannConstant => Property::Unclassified,
            Atom::PermittivityOfVacuum => Property::ElectricPermittivity,
            Atom::PermeabilityOfVacuum => Property::MagneticPermeability,
            Atom::ElementaryCharge => Property::ElectricCharge,
            Atom::ElectronMass => Property::Mass,
            Atom::ProtonMass => Property::Mass,
            Atom::NewtonianConstantOfGravitation => Property::Unclassified,
            Atom::StandardAccelerationOfFreeFall => Property::Acceleration,
            Atom::StandardAtmosphere => Property::Pressure,
            Atom::LightYear => Property::Length,
            Atom::GramForce => Property::Force,
            Atom::PoundForceAvoirdupois => Property::Force,
            Atom::Kayser => Property::LineicNumber,
            Atom::Gal => Property::Acceleration,
            Atom::Dyne => Property::Force,
            Atom::Erg => Property::Energy,
            Atom::Poise => Property::DynamicViscosity,
            Atom::Biot => Property::ElectricCurrent,
            Atom::Stokes => Property::KinematicViscosity,
            Atom::Maxwell => Property::FluxOfMagneticInduction,
            Atom::Gauss => Property::MagneticFluxDensity,
            Atom::Oersted => Property::MagneticFieldIntensity,
            Atom::Gilbert => Property::MagneticTension,
            Atom::Stilb => Property::LumIntensityDensity,
            Atom::Lambert => Property::Brightness,
            Atom::Phot => Property::Illuminance,
            Atom::Curie => Property::Radioactivity,
            Atom::Roentgen => Property::IonDose,
            Atom::RadiationAbsorbedDose => Property::EnergyDose,
            Atom::RadiationEquivalentMan => Property::DoseEquivalent,
            Atom::InchInternational => Property::Length,
            Atom::FootInternational => Property::Length,
            Atom::YardInternational => Property::Length,
            Atom::MileInternational => Property::Length,
            Atom::FathomInternational => Property::DepthOfWater,
            Atom::NauticalMileInternational => Property::Length,
            Atom::KnotInternational => Property::Velocity,
            Atom::SquareInchInternational => Property::Area,
            Atom::SquareFootInternational => Property::Area,
            Atom::SquareYardInternational => Property::Area,
            Atom::CubicInchInternational => Property::Volume,
            Atom::CubicFootInternational => Property::Volume,
            Atom::CubicYardInternational => Property::Volume,
            Atom::BoardFootInternational => Property::Volume,
            Atom::CordInternational => Property::Volume,
            Atom::MilInternational => Property::Length,
            Atom::CircularMilInternational => Property::Area,
            Atom::HandInternational => Property::HeightOfHorses,
            Atom::FootUS => Property::Length,
            Atom::YardUS => Property::Length,
            Atom::InchUS => Property::Length,
            Atom::RodUS => Property::Length,
            Atom::GuntersChainUS => Property::Length,
            Atom::LinkForGuntersChainUS => Property::Length,
            Atom::RamdensChainUS => Property::Length,
            Atom::LinkForRamdensChainUS => Property::Length,
            Atom::FathomUS => Property::Length,
            Atom::FurlongUS => Property::Length,
            Atom::MileUS => Property::Length,
            Atom::AcreUS => Property::Area,
            Atom::SquareRodUS => Property::Area,
            Atom::SquareMileUS => Property::Area,
            Atom::Section => Property::Area,
            Atom::Township => Property::Area,
            Atom::MilUS => Property::Length,
            Atom::InchBritish => Property::Length,
            Atom::FootBritish => Property::Length,
            Atom::RodBritish => Property::Length,
            Atom::GuntersChainBritish => Property::Length,
            Atom::LinkForGuntersChainBritish => Property::Length,
            Atom::FathomBritish => Property::Length,
            Atom::PaceBritish => Property::Length,
            Atom::YardBritish => Property::Length,
            Atom::MileBritish => Property::Length,
            Atom::NauticalMileBritish => Property::Length,
            Atom::KnotBritish => Property::Velocity,
            Atom::AcreBritish => Property::Area,
            Atom::QueenAnnesWineGallonUS => Property::FluidVolume,
            Atom::BarrelUS => Property::FluidVolume,
            Atom::QuartUS => Property::FluidVolume,
            Atom::PintUS => Property::FluidVolume,
            Atom::GillUS => Property::FluidVolume,
            Atom::FluidOunceUS => Property::FluidVolume,
            Atom::FluidDramUS => Property::FluidVolume,
            Atom::MinimUS => Property::FluidVolume,
            Atom::CordUS => Property::FluidVolume,
            Atom::BushelUS => Property::DryVolume,
            Atom::HistoricalWinchesterGallon => Property::DryVolume,
            Atom::PeckUS => Property::DryVolume,
            Atom::DryQuartUS => Property::DryVolume,
            Atom::DryPintUS => Property::DryVolume,
            Atom::TablespoonUS => Property::Volume,
            Atom::TeaspoonUS => Property::Volume,
            Atom::CupUS => Property::Volume,
            Atom::MetricFluidOunce => Property::FluidVolume,
            Atom::MetricCup => Property::Volume,
            Atom::MetricTeaspoon => Property::Volume,
            Atom::MetricTablespoon => Property::Volume,
            Atom::GallonBritish => Property::Volume,
            Atom::PeckBritish => Property::Volume,
            Atom::BushelBritish => Property::Volume,
            Atom::QuartBritish => Property::Volume,
            Atom::PintBritish => Property::Volume,
            Atom::GillBritish => Property::Volume,
            Atom::FluidOunceBritish => Property::Volume,
            Atom::FluidDramBritish => Property::Volume,
            Atom::MinimBritish => Property::Volume,
            Atom::Grain => Property::Mass,
            Atom::PoundAvoirdupois => Property::Mass,
            Atom::OunceAvoirdupois => Property::Mass,
            Atom::DramAvoirdupois => Property::Mass,
            Atom::ShortHundredweightAvoirdupois => Property::Mass,
            Atom::LongHunderdweightAvoirdupois => Property::Mass,
            Atom::ShortTonAvoirdupois => Property::Mass,
            Atom::LongTonAvoirdupois => Property::Mass,
            Atom::StoneAvoirdupois => Property::Mass,
            Atom::PennyweightTroy => Property::Mass,
            Atom::OunceTroy => Property::Mass,
            Atom::PoundTroy => Property::Mass,
            Atom::ScrupleApothecaries => Property::Mass,
            Atom::DramApothecaries => Property::Mass,
            Atom::OunceApothecaries => Property::Mass,
            Atom::PoundApothecaries => Property::Mass,
            Atom::MetricOunce => Property::Mass,
            Atom::Line => Property::Length,
            Atom::Point => Property::Length,
            Atom::Pica => Property::Length,
            Atom::PrintersPoint => Property::Length,
            Atom::PrintersPica => Property::Length,
            Atom::Pied => Property::Length,
            Atom::Pouce => Property::Length,
            Atom::Ligne => Property::Length,
            Atom::Didot => Property::Length,
            Atom::Cicero => Property::Length,
            Atom::DegreeFahrenheit => Property::Temperature,
            Atom::DegreeRankine => Property::Temperature,
            Atom::DegreeReaumur => Property::Temperature,
            Atom::CalorieAt15C => Property::Energy,
            Atom::CalorieAt20C => Property::Energy,
            Atom::MeanCalorie => Property::Energy,
            Atom::InternationalTableCalorie => Property::Energy,
            Atom::ThermochemicalCalorie => Property::Energy,
            Atom::Calorie => Property::Energy,
            Atom::NutritionLabelCalories => Property::Energy,
            Atom::BritishThermalUnitAt39F => Property::Energy,
            Atom::BritishThermalUnitAt59F => Property::Energy,
            Atom::BritishThermalUnitAt60F => Property::Energy,
            Atom::MeanBritishThermalUnit => Property::Energy,
            Atom::InternationalTableBritishThermalUnit => Property::Energy,
            Atom::ThermochemicalBritishThermalUnit => Property::Energy,
            Atom::BritishThermalUnit => Property::Energy,
            Atom::Horsepower => Property::Power,
            Atom::Tex => Property::LinearMassDensityOfTextileThread,
            Atom::Denier => Property::LinearMassDensityOfTextileThread,
            Atom::MeterOfWaterColumn => Property::Pressure,
            Atom::MeterOfMercuryColumn => Property::Pressure,
            Atom::InchOfWaterColumn => Property::Pressure,
            Atom::InchOfMercuryColumn => Property::Pressure,
            Atom::PeripheralVascularResistanceUnit => Property::FluidResistance,
            Atom::WoodUnit => Property::FluidResistance,
            Atom::Diopter => Property::RefractionOfALens,
            Atom::PrismDiopter => Property::RefractionOfAPrism,
            Atom::PercentOfSlope => Property::Slope,
            Atom::MeshInternational => Property::LineicNumber,
            Atom::Charriere => Property::GaugeOfCatheters,
            Atom::Drop => Property::Volume,
            Atom::HounsfieldUnit => Property::XRayAttenuation,
            Atom::MetabolicEquivalent => Property::MetabolicCostOfPhysicalActivity,
            Atom::HomeopathicPotencyOfDecimalSeriesRetired => Property::HomeopathicPotencyRetired,
            Atom::HomeopathicPotencyOfCentesimalSeriesRetired => Property::HomeopathicPotencyRetired,
            Atom::HomeopathicPotencyOfMillesimalSeriesRetired => Property::HomeopathicPotencyRetired,
            Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Property::HomeopathicPotencyRetired,
            Atom::HomeopathicPotencyOfDecimalHahnemannianSeries => Property::HomeopathicPotencyHahnemann,
            Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries => Property::HomeopathicPotencyHahnemann,
            Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries => Property::HomeopathicPotencyHahnemann,
            Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => Property::HomeopathicPotencyHahnemann,
            Atom::HomeopathicPotencyOfDecimalKorsakovianSeries => Property::HomeopathicPotencyKorsakov,
            Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries => Property::HomeopathicPotencyKorsakov,
            Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries => Property::HomeopathicPotencyKorsakov,
            Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Property::HomeopathicPotencyKorsakov,
            Atom::Equivalents => Property::AmountOfSubstance,
            Atom::Osmole => Property::AmountOfSubstanceDissolvedParticles,
            Atom::PH => Property::Acidity,
            Atom::GramPercent => Property::MassConcentration,
            Atom::SvedbergUnit => Property::SedimentationCoefficient,
            Atom::HighPowerField => Property::ViewAreaInMicroscope,
            Atom::LowPowerField => Property::ViewAreaInMicroscope,
            Atom::Katal => Property::CatalyticActivity,
            Atom::Unit => Property::CatalyticActivity,
            Atom::InternationalUnit => Property::Arbitrary,
            Atom::InternationalUnitSecondary => Property::Arbitrary,
            Atom::ArbitaryUnit => Property::Arbitrary,
            Atom::UnitedStatesPharmacopeiaUnit => Property::Arbitrary,
            Atom::GplUnit => Property::BiologicActivityOfAnticardiolipinIgG,
            Atom::MplUnit => Property::BiologicActivityOfAnticardiolipinIgM,
            Atom::AplUnit => Property::BiologicActivityOfAnticardiolipinIgA,
            Atom::BethesdaUnit => Property::BiologicActivityOfFactorViiiInhibitor,
            Atom::AntiFactorXaUnit => Property::BiologicActivityOfFactorXaInhibitorHeparin,
            Atom::ToddUnit => Property::BiologicActivityAntistreptolysinO,
            Atom::DyeUnit => Property::BiologicActivityOfAmylase,
            Atom::SomogyiUnit => Property::BiologicActivityOfAmylase,
            Atom::BodanskyUnit => Property::BiologicActivityOfPhosphatase,
            Atom::KingArmstrongUnit => Property::BiologicActivityOfPhosphatase,
            Atom::KunkelUnit => Property::ArbitraryBiologicActivity,
            Atom::MacLaganUnit => Property::ArbitraryBiologicActivity,
            Atom::TuberculinUnit => Property::BiologicActivityOfTuberculin,
            Atom::CellCultureInfectiousDose => Property::BiologicActivityInfectivityOfAnInfectiousAgentPreparation,
            Atom::TissueCultureInfectiousDose => Property::BiologicActivityInfectivityOfAnInfectiousAgentPreparation,
            Atom::EmbryoInfectiousDose => Property::BiologicActivityInfectivityOfAnInfectiousAgentPreparation,
            Atom::PlaqueFormingUnits => Property::AmountOfAnInfectiousAgent,
            Atom::FocusFormingUnits => Property::AmountOfAnInfectiousAgent,
            Atom::ColonyFormingUnits => Property::AmountOfAProliferatingOrganism,
            Atom::IndexOfReactivity => Property::AmountOfAnAllergenCallibratedThroughInVivoTestingUsingTheStallergenesMethod,
            Atom::BioequivalentAllergenUnit => Property::AmountOfAnAllergenCallibratedThroughInVivoTestingBasedOnTheId50ealMethodOfIntradermalDilutionFor50mmSumOfErythemaDiameters,
            Atom::AllergenUnit => Property::ProcedureDefinedAmountOfAnAllergenUsingSomeReferenceStandard,
            Atom::AllergenUnitForAmbrosiaArtemisiifolia => Property::ProcedureDefinedAmountOfTheMajorAllergenOfRagweed,
            Atom::ProteinNitrogenUnit => Property::ProcedureDefinedAmountOfAProteinSubstance,
            Atom::LimitOfFlocculation => Property::ProcedureDefinedAmountOfAnAntigenSubstance,
            Atom::DAntigenUnit => Property::ProcedureDefinedAmountOfAPoliomyelitisDAntigenSubstance,
            Atom::FibrinogenEquivalentUnit => Property::AmountOfFibrinogenBrokenDownIntoTheMeasuredDDimers,
            Atom::ElisaUnit => Property::ArbitraryElisaUnit,
            Atom::EhrlichUnit => Property::EhrlichUnit,
            Atom::Neper => Property::Level,
            Atom::Bel => Property::Level,
            Atom::BelSoundPressure => Property::PressureLevel,
            Atom::BelVolt => Property::ElectricPotentialLevel,
            Atom::BelMillivolt => Property::ElectricPotentialLevel,
            Atom::BelMicrovolt => Property::ElectricPotentialLevel,
            Atom::Bel10Nanovolt => Property::ElectricPotentialLevel,
            Atom::BelWatt => Property::PowerLevel,
            Atom::BelKilowatt => Property::PowerLevel,
            Atom::Stere => Property::Volume,
            Atom::Angstrom => Property::Length,
            Atom::Barn => Property::ActionArea,
            Atom::TechnicalAtmosphere => Property::Pressure,
            Atom::Mho => Property::ElectricConductance,
            Atom::PoundPerSqareInch => Property::Pressure,
            Atom::Circle => Property::PlaneAngle,
            Atom::Spere => Property::SolidAngle,
            Atom::MetricCarat => Property::Mass,
            Atom::CaratOfGoldAlloys => Property::MassFraction,
            Atom::Smoot => Property::Length,
            Atom::MeterPerSquareSecondsPerSquareRootOfHertz => Property::AmplitudeSpectralDensity,
            Atom::BitLogarithmusDualis => Property::AmountOfInformation,
            Atom::Bit => Property::AmountOfInformation,
            Atom::Byte => Property::AmountOfInformation,
            Atom::Baud => Property::SignalTransmissionRate,
        }
    }

    fn secondary_code(&self) -> Option<&'static str> {
        match *self {
            Atom::Meter => Some("M"),
            Atom::Second => Some("S"),
            Atom::Gram => Some("G"),
            Atom::Radian => Some("RAD"),
            Atom::Kelvin => Some("K"),
            Atom::Coulomb => Some("C"),
            Atom::Candela => Some("CD"),
            Atom::TheNumberTenForArbitraryPowersStar => Some("10*"),
            Atom::TheNumberTenForArbitraryPowersCaret => Some("10^"),
            Atom::TheNumberPi => Some("[PI]"),
            Atom::Percent => Some("%"),
            Atom::PartsPerThousand => Some("[PPTH]"),
            Atom::PartsPerMillion => Some("[PPM]"),
            Atom::PartsPerBillion => Some("[PPB]"),
            Atom::PartsPerTrillion => Some("[PPTR]"),
            Atom::Mole => Some("MOL"),
            Atom::Steradian => Some("SR"),
            Atom::Hertz => Some("HZ"),
            Atom::Newton => Some("N"),
            Atom::Pascal => Some("PAL"),
            Atom::Joule => Some("J"),
            Atom::Watt => Some("W"),
            Atom::Ampere => Some("A"),
            Atom::Volt => Some("V"),
            Atom::Farad => Some("F"),
            Atom::Ohm => Some("OHM"),
            Atom::Siemens => Some("SIE"),
            Atom::Weber => Some("WB"),
            Atom::DegreeCelsius => Some("CEL"),
            Atom::Tesla => Some("T"),
            Atom::Henry => Some("H"),
            Atom::Lumen => Some("LM"),
            Atom::Lux => Some("LX"),
            Atom::Becquerel => Some("BQ"),
            Atom::Gray => Some("GY"),
            Atom::Sievert => Some("SV"),
            Atom::Gon => Some("GON"),
            Atom::Degree => Some("DEG"),
            Atom::MinuteAngle => Some("'"),
            Atom::SecondAngle => Some("''"),
            Atom::Liter => Some("L"),
            Atom::Are => Some("AR"),
            Atom::Minute => Some("MIN"),
            Atom::Hour => Some("HR"),
            Atom::Day => Some("D"),
            Atom::TropicalYear => Some("ANN_T"),
            Atom::MeanJulianYear => Some("ANN_J"),
            Atom::MeanGregorianYear => Some("ANN_G"),
            Atom::Year => Some("ANN"),
            Atom::Week => Some("WK"),
            Atom::SynodalMonth => Some("MO_S"),
            Atom::MeanJulianMonth => Some("MO_J"),
            Atom::MeanGregorianMonth => Some("MO_G"),
            Atom::Month => Some("MO"),
            Atom::Tonne => Some("TNE"),
            Atom::Bar => Some("BAR"),
            Atom::UnifiedAtomicMassUnit => Some("AMU"),
            Atom::Electronvolt => Some("EV"),
            Atom::AstronomicUnit => Some("ASU"),
            Atom::Parsec => Some("PRS"),
            Atom::VelocityOfLight => Some("[C]"),
            Atom::PlanckConstant => Some("[H]"),
            Atom::BoltzmannConstant => Some("[K]"),
            Atom::PermittivityOfVacuum => Some("[EPS_0]"),
            Atom::PermeabilityOfVacuum => Some("[MU_0]"),
            Atom::ElementaryCharge => Some("[E]"),
            Atom::ElectronMass => Some("[M_E]"),
            Atom::ProtonMass => Some("[M_P]"),
            Atom::NewtonianConstantOfGravitation => Some("[GC]"),
            Atom::StandardAccelerationOfFreeFall => Some("[G]"),
            Atom::StandardAtmosphere => Some("ATM"),
            Atom::LightYear => Some("[LY]"),
            Atom::GramForce => Some("GF"),
            Atom::PoundForceAvoirdupois => Some("[LBF_AV]"),
            Atom::Kayser => Some("KY"),
            Atom::Gal => Some("GL"),
            Atom::Dyne => Some("DYN"),
            Atom::Erg => Some("ERG"),
            Atom::Poise => Some("P"),
            Atom::Biot => Some("BI"),
            Atom::Stokes => Some("ST"),
            Atom::Maxwell => Some("MX"),
            Atom::Gauss => Some("GS"),
            Atom::Oersted => Some("OE"),
            Atom::Gilbert => Some("GB"),
            Atom::Stilb => Some("SB"),
            Atom::Lambert => Some("LMB"),
            Atom::Phot => Some("PHT"),
            Atom::Curie => Some("CI"),
            Atom::Roentgen => Some("ROE"),
            Atom::RadiationAbsorbedDose => Some("[RAD]"),
            Atom::RadiationEquivalentMan => Some("[REM]"),
            Atom::InchInternational => Some("[IN_I]"),
            Atom::FootInternational => Some("[FT_I]"),
            Atom::YardInternational => Some("[YD_I]"),
            Atom::MileInternational => Some("[MI_I]"),
            Atom::FathomInternational => Some("[FTH_I]"),
            Atom::NauticalMileInternational => Some("[NMI_I]"),
            Atom::KnotInternational => Some("[KN_I]"),
            Atom::SquareInchInternational => Some("[SIN_I]"),
            Atom::SquareFootInternational => Some("[SFT_I]"),
            Atom::SquareYardInternational => Some("[SYD_I]"),
            Atom::CubicInchInternational => Some("[CIN_I]"),
            Atom::CubicFootInternational => Some("[CFT_I]"),
            Atom::CubicYardInternational => Some("[CYD_I]"),
            Atom::BoardFootInternational => Some("[BF_I]"),
            Atom::CordInternational => Some("[CR_I]"),
            Atom::MilInternational => Some("[MIL_I]"),
            Atom::CircularMilInternational => Some("[CML_I]"),
            Atom::HandInternational => Some("[HD_I]"),
            Atom::FootUS => Some("[FT_US]"),
            Atom::YardUS => Some("[YD_US]"),
            Atom::InchUS => Some("[IN_US]"),
            Atom::RodUS => Some("[RD_US]"),
            Atom::GuntersChainUS => Some("[CH_US]"),
            Atom::LinkForGuntersChainUS => Some("[LK_US]"),
            Atom::RamdensChainUS => Some("[RCH_US]"),
            Atom::LinkForRamdensChainUS => Some("[RLK_US]"),
            Atom::FathomUS => Some("[FTH_US]"),
            Atom::FurlongUS => Some("[FUR_US]"),
            Atom::MileUS => Some("[MI_US]"),
            Atom::AcreUS => Some("[ACR_US]"),
            Atom::SquareRodUS => Some("[SRD_US]"),
            Atom::SquareMileUS => Some("[SMI_US]"),
            Atom::Section => Some("[SCT]"),
            Atom::Township => Some("[TWP]"),
            Atom::MilUS => Some("[MIL_US]"),
            Atom::InchBritish => Some("[IN_BR]"),
            Atom::FootBritish => Some("[FT_BR]"),
            Atom::RodBritish => Some("[RD_BR]"),
            Atom::GuntersChainBritish => Some("[CH_BR]"),
            Atom::LinkForGuntersChainBritish => Some("[LK_BR]"),
            Atom::FathomBritish => Some("[FTH_BR]"),
            Atom::PaceBritish => Some("[PC_BR]"),
            Atom::YardBritish => Some("[YD_BR]"),
            Atom::MileBritish => Some("[MI_BR]"),
            Atom::NauticalMileBritish => Some("[NMI_BR]"),
            Atom::KnotBritish => Some("[KN_BR]"),
            Atom::AcreBritish => Some("[ACR_BR]"),
            Atom::QueenAnnesWineGallonUS => Some("[GAL_US]"),
            Atom::BarrelUS => Some("[BBL_US]"),
            Atom::QuartUS => Some("[QT_US]"),
            Atom::PintUS => Some("[PT_US]"),
            Atom::GillUS => Some("[GIL_US]"),
            Atom::FluidOunceUS => Some("[FOZ_US]"),
            Atom::FluidDramUS => Some("[FDR_US]"),
            Atom::MinimUS => Some("[MIN_US]"),
            Atom::CordUS => Some("[CRD_US]"),
            Atom::BushelUS => Some("[BU_US]"),
            Atom::HistoricalWinchesterGallon => Some("[GAL_WI]"),
            Atom::PeckUS => Some("[PK_US]"),
            Atom::DryQuartUS => Some("[DQT_US]"),
            Atom::DryPintUS => Some("[DPT_US]"),
            Atom::TablespoonUS => Some("[TBS_US]"),
            Atom::TeaspoonUS => Some("[TSP_US]"),
            Atom::CupUS => Some("[CUP_US]"),
            Atom::MetricFluidOunce => Some("[FOZ_M]"),
            Atom::MetricCup => Some("[CUP_M]"),
            Atom::MetricTeaspoon => Some("[TSP_M]"),
            Atom::MetricTablespoon => Some("[TBS_M]"),
            Atom::GallonBritish => Some("[GAL_BR]"),
            Atom::PeckBritish => Some("[PK_BR]"),
            Atom::BushelBritish => Some("[BU_BR]"),
            Atom::QuartBritish => Some("[QT_BR]"),
            Atom::PintBritish => Some("[PT_BR]"),
            Atom::GillBritish => Some("[GIL_BR]"),
            Atom::FluidOunceBritish => Some("[FOZ_BR]"),
            Atom::FluidDramBritish => Some("[FDR_BR]"),
            Atom::MinimBritish => Some("[MIN_BR]"),
            Atom::Grain => Some("[GR]"),
            Atom::PoundAvoirdupois => Some("[LB_AV]"),
            Atom::OunceAvoirdupois => Some("[OZ_AV]"),
            Atom::DramAvoirdupois => Some("[DR_AV]"),
            Atom::ShortHundredweightAvoirdupois => Some("[SCWT_AV]"),
            Atom::LongHunderdweightAvoirdupois => Some("[LCWT_AV]"),
            Atom::ShortTonAvoirdupois => Some("[STON_AV]"),
            Atom::LongTonAvoirdupois => Some("[LTON_AV]"),
            Atom::StoneAvoirdupois => Some("[STONE_AV]"),
            Atom::PennyweightTroy => Some("[PWT_TR]"),
            Atom::OunceTroy => Some("[OZ_TR]"),
            Atom::PoundTroy => Some("[LB_TR]"),
            Atom::ScrupleApothecaries => Some("[SC_AP]"),
            Atom::DramApothecaries => Some("[DR_AP]"),
            Atom::OunceApothecaries => Some("[OZ_AP]"),
            Atom::PoundApothecaries => Some("[LB_AP]"),
            Atom::MetricOunce => Some("[OZ_M]"),
            Atom::Line => Some("[LNE]"),
            Atom::Point => Some("[PNT]"),
            Atom::Pica => Some("[PCA]"),
            Atom::PrintersPoint => Some("[PNT_PR]"),
            Atom::PrintersPica => Some("[PCA_PR]"),
            Atom::Pied => Some("[PIED]"),
            Atom::Pouce => Some("[POUCE]"),
            Atom::Ligne => Some("[LIGNE]"),
            Atom::Didot => Some("[DIDOT]"),
            Atom::Cicero => Some("[CICERO]"),
            Atom::DegreeFahrenheit => Some("[DEGF]"),
            Atom::DegreeRankine => Some("[degR]"),
            Atom::DegreeReaumur => Some("[degRe]"),
            Atom::CalorieAt15C => Some("CAL_[15]"),
            Atom::CalorieAt20C => Some("CAL_[20]"),
            Atom::MeanCalorie => Some("CAL_M"),
            Atom::InternationalTableCalorie => Some("CAL_IT"),
            Atom::ThermochemicalCalorie => Some("CAL_TH"),
            Atom::Calorie => Some("CAL"),
            Atom::NutritionLabelCalories => Some("[CAL]"),
            Atom::BritishThermalUnitAt39F => Some("[BTU_39]"),
            Atom::BritishThermalUnitAt59F => Some("[BTU_59]"),
            Atom::BritishThermalUnitAt60F => Some("[BTU_60]"),
            Atom::MeanBritishThermalUnit => Some("[BTU_M]"),
            Atom::InternationalTableBritishThermalUnit => Some("[BTU_IT]"),
            Atom::ThermochemicalBritishThermalUnit => Some("[BTU_TH]"),
            Atom::BritishThermalUnit => Some("[BTU]"),
            Atom::Horsepower => Some("[HP]"),
            Atom::Tex => Some("TEX"),
            Atom::Denier => Some("[DEN]"),
            Atom::MeterOfWaterColumn => Some("M[H2O]"),
            Atom::MeterOfMercuryColumn => Some("M[HG]"),
            Atom::InchOfWaterColumn => Some("[IN_I'H2O]"),
            Atom::InchOfMercuryColumn => Some("[IN_I'HG]"),
            Atom::PeripheralVascularResistanceUnit => Some("[PRU]"),
            Atom::WoodUnit => Some("[WOOD'U]"),
            Atom::Diopter => Some("[DIOP]"),
            Atom::PrismDiopter => Some("[P'DIOP]"),
            Atom::PercentOfSlope => Some("%[SLOPE]"),
            Atom::MeshInternational => Some("[MESH_I]"),
            Atom::Charriere => Some("[CH]"),
            Atom::Drop => Some("[DRP]"),
            Atom::HounsfieldUnit => Some("[HNSF'U]"),
            Atom::MetabolicEquivalent => Some("[MET]"),
            Atom::HomeopathicPotencyOfDecimalSeriesRetired => Some("[HP'_X]"),
            Atom::HomeopathicPotencyOfCentesimalSeriesRetired => Some("[HP'_C]"),
            Atom::HomeopathicPotencyOfMillesimalSeriesRetired => Some("[HP'_M]"),
            Atom::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Some("[HP'_Q]"),
            Atom::HomeopathicPotencyOfDecimalHahnemannianSeries => Some("[HP_X]"),
            Atom::HomeopathicPotencyOfCentesimalHahnemannianSeries => Some("[HP_C]"),
            Atom::HomeopathicPotencyOfMillesimalHahnemannianSeries => Some("[HP_M]"),
            Atom::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => Some("[HP_Q]"),
            Atom::HomeopathicPotencyOfDecimalKorsakovianSeries => Some("[KP_X]"),
            Atom::HomeopathicPotencyOfCentesimalKorsakovianSeries => Some("[KP_C]"),
            Atom::HomeopathicPotencyOfMillesimalKorsakovianSeries => Some("[KP_M]"),
            Atom::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Some("[KP_Q]"),
            Atom::Equivalents => Some("EQ"),
            Atom::Osmole => Some("OSM"),
            Atom::PH => Some("[PH]"),
            Atom::GramPercent => Some("G%"),
            Atom::SvedbergUnit => Some("[S]"),
            Atom::HighPowerField => Some("[HPF]"),
            Atom::LowPowerField => Some("[LPF]"),
            Atom::Katal => Some("KAT"),
            Atom::Unit => Some("U"),
            Atom::InternationalUnit => Some("[IU]"),
            Atom::InternationalUnitSecondary => Some("[IU]"),
            Atom::ArbitaryUnit => Some("[ARB'U]"),
            Atom::UnitedStatesPharmacopeiaUnit => Some("[USP'U]"),
            Atom::GplUnit => Some("[GPL'U]"),
            Atom::MplUnit => Some("[MPL'U]"),
            Atom::AplUnit => Some("[APL'U]"),
            Atom::BethesdaUnit => Some("[BETH'U]"),
            Atom::AntiFactorXaUnit => Some("[ANTI'XA'U]"),
            Atom::ToddUnit => Some("[TODD'U]"),
            Atom::DyeUnit => Some("[DYE'U]"),
            Atom::SomogyiUnit => Some("[SMGY'U]"),
            Atom::BodanskyUnit => Some("[BDSK'U]"),
            Atom::KingArmstrongUnit => Some("[KA'U]"),
            Atom::KunkelUnit => Some("[KNK'U]"),
            Atom::MacLaganUnit => Some("[MCLG'U]"),
            Atom::TuberculinUnit => Some("[TB'U]"),
            Atom::CellCultureInfectiousDose => Some("[CCID_50]"),
            Atom::TissueCultureInfectiousDose => Some("[TCID_50]"),
            Atom::EmbryoInfectiousDose => Some("[EID_50]"),
            Atom::PlaqueFormingUnits => Some("[PFU]"),
            Atom::FocusFormingUnits => Some("[FFU]"),
            Atom::ColonyFormingUnits => Some("[CFU]"),
            Atom::IndexOfReactivity => Some("[IR]"),
            Atom::BioequivalentAllergenUnit => Some("[BAU]"),
            Atom::AllergenUnit => Some("[AU]"),
            Atom::AllergenUnitForAmbrosiaArtemisiifolia => Some("[AMB'A'1'U]"),
            Atom::ProteinNitrogenUnit => Some("[PNU]"),
            Atom::LimitOfFlocculation => Some("[LF]"),
            Atom::DAntigenUnit => Some("[D'AG'U]"),
            Atom::FibrinogenEquivalentUnit => Some("[FEU]"),
            Atom::ElisaUnit => Some("[ELU]"),
            Atom::EhrlichUnit => Some("[EU]"),
            Atom::Neper => Some("NEP"),
            Atom::Bel => Some("B"),
            Atom::BelSoundPressure => Some("B[SPL]"),
            Atom::BelVolt => Some("B[V]"),
            Atom::BelMillivolt => Some("B[MV]"),
            Atom::BelMicrovolt => Some("B[UV]"),
            Atom::Bel10Nanovolt => Some("B[10.NV]"),
            Atom::BelWatt => Some("B[W]"),
            Atom::BelKilowatt => Some("B[KW]"),
            Atom::Stere => Some("STR"),
            Atom::Angstrom => Some("AO"),
            Atom::Barn => Some("BRN"),
            Atom::TechnicalAtmosphere => Some("ATT"),
            Atom::Mho => Some("MHO"),
            Atom::PoundPerSqareInch => Some("[PSI]"),
            Atom::Circle => Some("CIRC"),
            Atom::Spere => Some("SPH"),
            Atom::MetricCarat => Some("[CAR_M]"),
            Atom::CaratOfGoldAlloys => Some("[CAR_AU]"),
            Atom::Smoot => Some("[SMOOT]"),
            Atom::MeterPerSquareSecondsPerSquareRootOfHertz => Some("[M/S2/HZ^(1/2)]"),
            Atom::BitLogarithmusDualis => Some("BIT_S"),
            Atom::Bit => Some("BIT"),
            Atom::Byte => Some("BY"),
            Atom::Baud => Some("BD"),
            _ => None,
        }
    }

    fn scalar(&self) -> f64 {
        debug!("scalar()");

        self.calculate_scalar(1.0)
    }

    fn magnitude(&self) -> f64 {
        debug!("magnitude()");

        self.calculate_magnitude(self.scalar())
    }

    fn calculate_scalar(&self, value: f64) -> f64 {
        debug!("calculate_scalar()");

        self.definition().calculate_scalar(value)
    }

    fn calculate_magnitude(&self, value: f64) -> f64 {
        debug!("calculate_magnitude()");

        if self.is_special() {
            self.definition().calculate_magnitude(value)
        } else {
            1.0
        }
    }
}

impl Composable for Atom {
    fn composition(&self) -> Composition {
        match *self {
            Atom::Candela => Composition::new(Dimension::LuminousIntensity, 1),
            Atom::Coulomb => Composition::new(Dimension::ElectricCharge, 1),
            Atom::Gram => Composition::new(Dimension::Mass, 1),
            Atom::Kelvin => Composition::new(Dimension::Temperature, 1),
            Atom::Meter => Composition::new(Dimension::Length, 1),
            Atom::Radian => Composition::new(Dimension::PlaneAngle, 1),
            Atom::Second => Composition::new(Dimension::Time, 1),
            _ => self.definition().terms.composition(),
        }
    }
}

impl fmt::Display for Atom {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.primary_code())
    }
}

#[cfg(test)]
mod tests {
    use super::Atom;
    use classification::Classification;
    use composable::Composable;
    use composition::Composition;
    use dimension::Dimension;
    use prefix::Prefix;
    use term::Term;
    use ucum_symbol::UcumSymbol;

    macro_rules! validate_definition {
        (
            $test_name:ident,
            $atom_name:ident,
            $expected_value:expr,
            with_function_set,
            $($expected_term:expr),+
        ) => {
            #[test]
            fn $test_name() {
                let atom = Atom::$atom_name;

                assert_eq!(atom.definition().value, $expected_value);
                assert_eq!(atom.definition().terms, vec![$($expected_term),+]);
                assert!(atom.definition().function_set.is_some());
            }
        };

        (
            $test_name:ident,
            $atom_name:ident,
            $expected_value:expr,
            $($expected_term:expr),+
        ) => {
            #[test]
            fn $test_name() {
                let atom = Atom::$atom_name;

                assert_eq!(atom.definition().value, $expected_value);
                assert_eq!(atom.definition().terms, vec![$($expected_term),+]);
                assert_eq!(atom.definition().function_set, None);
            }
        };
    }

    macro_rules! validate_scalar {
        ($test_name:ident, $variant:ident, $value:expr) => {
            #[test]
            fn $test_name() {
                ::simple_logger::init().ok();
                let atom = Atom::$variant;
                assert_relative_eq!(atom.scalar(), $value);
                assert_ulps_eq!(atom.scalar(), $value);
            }
        };
    }

    macro_rules! validate_scalars {
        ($($test_name: ident, $variant: ident, $value: expr);+ $(;)*) => {
            $(
                validate_scalar!($test_name, $variant, $value);
            )+
        };
    }

    macro_rules! validate_magnitude {
        ($test_name:ident, $variant:ident, $value:expr) => {
            #[test]
            fn $test_name() {
                let atom = Atom::$variant;
                assert_relative_eq!(atom.magnitude(), $value);
                assert_ulps_eq!(atom.magnitude(), $value);
            }
        };
    }

    macro_rules! validate_magnitudes {
        ($($test_name: ident, $variant: ident, $value: expr);+ $(;)*) => {
            $(
                validate_magnitude!($test_name, $variant, $value);
            )+
        };
    }

    macro_rules! validate_composition {
        (
            @insert
            $composition:expr,
            $dimension_variant:ident: $value:expr
        ) => {
            $composition.insert(Dimension::$dimension_variant, $value);
        };

        (
            $test_name:ident,
            $atom_variant:ident,
            $($dimension_variant:ident: $value:expr),+
        ) => {
            #[test]
            fn $test_name() {
                let atom = Atom::$atom_variant;
                let mut composition = Composition::default();
                $(
                    validate_composition!(@insert composition, $dimension_variant: $value);
                )+
                assert_eq!(atom.composition(), composition);
            }
        };
    }

    #[test]
    fn validate_classification_si() {
        let atoms = vec![
            Atom::Candela,
            Atom::Coulomb,
            Atom::DegreeCelsius,
            Atom::Gram,
            Atom::Kelvin,
            Atom::Meter,
            Atom::Radian,
            Atom::Second,
            Atom::Mole,
        ];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::Si);
        }
    }

    #[test]
    fn validate_classification_us_lengths() {
        let atoms = vec![Atom::AcreUS, Atom::FootUS, Atom::RodUS];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::UsLengths);
        }
    }

    #[test]
    fn validate_classification_iso1000() {
        let atoms = vec![Atom::Are, Atom::Degree, Atom::Liter];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::Iso1000);
        }
    }

    #[test]
    fn validate_classification_heat() {
        let atoms = vec![Atom::DegreeFahrenheit, Atom::DegreeReaumur];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::Heat);
        }
    }

    #[test]
    fn validate_classification_us_volumes() {
        let atoms = vec![
            Atom::FluidOunceUS,
            Atom::GillUS,
            Atom::QuartUS,
            Atom::QueenAnnesWineGallonUS,
        ];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::UsVolumes);
        }
    }

    #[test]
    fn validate_classification_intcust() {
        let atoms = vec![Atom::InchInternational, Atom::FootInternational];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::Intcust);
        }
    }

    #[test]
    fn validate_classification_dimless() {
        let atoms = vec![
            Atom::PartsPerBillion,
            Atom::PartsPerMillion,
            Atom::PartsPerThousand,
            Atom::PartsPerTrillion,
            Atom::Percent,
            Atom::TheNumberPi,
            Atom::TheNumberTenForArbitraryPowersCaret,
            Atom::TheNumberTenForArbitraryPowersStar,
        ];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::Dimless);
        }
    }

    #[test]
    fn validate_classification_chemical() {
        let atoms = vec![Atom::PH];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::Chemical);
        }
    }

    #[test]
    fn validate_classification_clinical() {
        let atoms = vec![Atom::PrismDiopter];

        for atom in atoms {
            assert_eq!(atom.classification(), Classification::Clinical);
        }
    }

    #[test]
    fn validate_definitions_base_atoms() {
        let base_atoms = vec![
            Atom::Candela,
            Atom::Coulomb,
            Atom::Gram,
            Atom::Kelvin,
            Atom::Meter,
            Atom::Radian,
            Atom::Second,
        ];
        let terms = vec![term!()];

        for base_atom in base_atoms {
            assert_eq!(base_atom.definition().value, 1.0);
            assert_eq!(base_atom.definition().terms, terms);
        }
    }

    validate_definition!(
        validate_definition_acre_us,
        AcreUS,
        160.0,
        term!(RodUS, exponent: 2)
    );
    validate_definition!(
        validate_definition_are,
        Are,
        100.0,
        term!(Meter, exponent: 2)
    );
    validate_definition!(
        validate_definition_degree,
        Degree,
        2.0,
        term!(TheNumberPi),
        term!(Radian),
        term!(factor: 360, exponent: -1)
    );
    validate_definition!(
        validate_definition_degree_celsius,
        DegreeCelsius,
        1.0,
        with_function_set,
        term!(Kelvin)
    );
    validate_definition!(
        validate_definition_degree_fahrenheit,
        DegreeFahrenheit,
        5.0,
        with_function_set,
        term!(Kelvin),
        term!(factor: 9, exponent: -1)
    );
    validate_definition!(
        validate_definition_degree_reaumur,
        DegreeReaumur,
        5.0,
        with_function_set,
        term!(Kelvin),
        term!(factor: 4, exponent: -1)
    );
    validate_definition!(
        validate_definition_fluid_ounce_us,
        FluidOunceUS,
        1.0,
        term!(GillUS),
        term!(factor: 4, exponent: -1)
    );
    validate_definition!(
        validate_definition_foot_international,
        FootInternational,
        12.0,
        term!(InchInternational)
    );
    validate_definition!(
        validate_definition_inch_international,
        InchInternational,
        254e-2,
        term!(Centi, Meter)
    );
    validate_definition!(
        validate_definition_foot_us,
        FootUS,
        1200.0,
        term!(Meter),
        term!(factor: 3937, exponent: -1)
    );
    validate_definition!(
        validate_definition_gill_us,
        GillUS,
        1.0,
        term!(PintUS),
        term!(factor: 4, exponent: -1)
    );
    validate_definition!(
        validate_definition_liter,
        Liter,
        1.0,
        term!(Deci, Meter, exponent: 3)
    );
    validate_definition!(
        validate_definition_mole,
        Mole,
        6.022_136_7,
        term!(TheNumberTenForArbitraryPowersStar, exponent: 23)
    );
    validate_definition!(
        validate_definition_parts_per_billion,
        PartsPerBillion,
        1.0,
        term!(TheNumberTenForArbitraryPowersStar, exponent: -9)
    );
    validate_definition!(
        validate_definition_parts_per_million,
        PartsPerMillion,
        1.0,
        term!(TheNumberTenForArbitraryPowersStar, exponent: -6)
    );
    validate_definition!(
        validate_definition_parts_per_thousand,
        PartsPerThousand,
        1.0,
        term!(TheNumberTenForArbitraryPowersStar, exponent: -3)
    );
    validate_definition!(
        validate_definition_ph,
        PH,
        1.0,
        with_function_set,
        term!(Mole),
        term!(Liter, exponent: -1)
    );
    validate_definition!(
        validate_definition_pint_us,
        PintUS,
        1.0,
        term!(QuartUS),
        term!(factor: 2, exponent: -1)
    );
    validate_definition!(
        validate_definition_prism_diopter,
        PrismDiopter,
        1.0,
        with_function_set,
        term!(Radian)
    );
    validate_definition!(
        validate_definition_bel_watt,
        BelWatt,
        1.0,
        with_function_set,
        term!(Watt)
    );
    validate_definition!(
        validate_definition_quart_us,
        QuartUS,
        1.0,
        term!(QueenAnnesWineGallonUS),
        term!(factor: 4, exponent: -1)
    );
    validate_definition!(
        validate_definition_metric_cup,
        MetricCup,
        240.0,
        term!(Milli, LiterSecondary)
    );
    validate_definition!(
        validate_definition_queen_annes_wine_gallon_us,
        QueenAnnesWineGallonUS,
        231.0,
        term!(InchInternational, exponent: 3)
    );
    validate_definition!(validate_definition_rod_us, RodUS, 16.5, term!(FootUS));
    validate_definition!(
        validate_definition_the_number_pi,
        TheNumberPi,
        3.141_592_653_589_793_238_462_643_383_279_502_884_197_169_399_375_105_820_974_944_592_3,
        term!()
    );
    validate_definition!(
        validate_definition_the_number_ten_for_arbitrary_powers_caret,
        TheNumberTenForArbitraryPowersCaret,
        10.0,
        term!()
    );
    validate_definition!(
        validate_definition_the_number_ten_for_arbitrary_powers_star,
        TheNumberTenForArbitraryPowersStar,
        10.0,
        term!()
    );

    // Composition tests
    validate_composition!(validate_composition_candela, Candela, LuminousIntensity: 1);
    validate_composition!(validate_composition_coulomb, Coulomb, ElectricCharge: 1);
    validate_composition!(validate_composition_gram, Gram, Mass: 1);
    validate_composition!(validate_composition_kelvin, Kelvin, Temperature: 1);
    validate_composition!(validate_composition_meter, Meter, Length: 1);
    validate_composition!(validate_composition_radian, Radian, PlaneAngle: 1);
    validate_composition!(validate_composition_second, Second, Time: 1);

    validate_composition!(validate_composition_acre_british, AcreBritish, Length: 2);
    validate_composition!(validate_composition_acre_us, AcreUS, Length: 2);
    validate_composition!(validate_composition_are, Are, Length: 2);
    validate_composition!(validate_composition_astronomic_unit, AstronomicUnit, Length: 1);
    validate_composition!(validate_composition_bar, Bar, Length: -1, Mass: 1, Time: -2);
    validate_composition!(validate_composition_barrel_us, BarrelUS, Length: 3);
    validate_composition!(validate_composition_becquerel, Becquerel, Time: -1);
    validate_composition!(validate_composition_biot, Biot, ElectricCharge: 1, Time: -1);
    validate_composition!(validate_composition_board_foot_international, BoardFootInternational, Length: 3);
    validate_composition!(
        validate_composition_boltzmann_constant,
        BoltzmannConstant,
        Length: 2, Mass: 1, Temperature: -1, Time: -2
    );
    validate_composition!(
        validate_composition_british_thermal_unit_at_39f,
        BritishThermalUnitAt39F,
        Length: 2, Mass: 1, Time: -2
    );
    validate_composition!(
        validate_composition_bushel_british,
        BushelBritish,
        Length: 3
    );
    validate_composition!(
        validate_composition_bushel_us,
        BushelUS,
        Length: 3
    );
    validate_composition!(
        validate_composition_calorie_at_15c,
        CalorieAt15C,
        Length: 2, Mass: 1, Time: -2
    );
    validate_composition!(
        validate_composition_calorie_at_20c,
        CalorieAt20C,
        Length: 2, Mass: 1, Time: -2
    );
    validate_composition!(
        validate_composition_international_table_calorie,
        InternationalTableCalorie,
        Length: 2, Mass: 1, Time: -2
    );
    validate_composition!(
        validate_composition_pound_av,
        PoundAvoirdupois,
        Mass: 1
    );

    // Scalar tests
    validate_scalars!(
        validate_scalar_candela, Candela, 1.0;
        validate_scalar_coulomb, Coulomb, 1.0;
        validate_scalar_gram, Gram, 1.0;
        validate_scalar_kelvin, Kelvin, 1.0;
        validate_scalar_meter, Meter, 1.0;
        validate_scalar_radian, Radian, 1.0;
        validate_scalar_second, Second, 1.0;

        validate_scalar_acre_br, AcreBritish, 4046.850_049_400_268_7;
        validate_scalar_acre_us, AcreUS, 4046.872_609_874_252;
        validate_scalar_are, Are, 100.0;
        validate_scalar_astronomic_unit, AstronomicUnit, 149_597_870_691.0;
        validate_scalar_bar, Bar, 100_000_000.0;
        validate_scalar_barrel_us, BarrelUS, 0.158_987_294_928;
        validate_scalar_becquerel, Becquerel, 1.0;
        validate_scalar_biot, Biot, 10.0;
        validate_scalar_board_foot_international, BoardFootInternational, 0.002_359_737_216;
        validate_scalar_boltzmann_constant, BoltzmannConstant, 1.380_658e-20;
        validate_scalar_btu_at_39f, BritishThermalUnitAt39F, 1_059_670.0;
        validate_scalar_bushel_br, BushelBritish, 0.036_368_72;
        validate_scalar_bushel_us, BushelUS, 0.035_239_070_166_88;

        validate_scalar_calorie_at_20c, CalorieAt20C, 4181.9;
        validate_scalar_calorie_at_15c, CalorieAt15C, 4185.8;
        validate_scalar_calorie_it, InternationalTableCalorie, 4186.8;
        validate_scalar_calorie_th, ThermochemicalCalorie, 4184.0;
        validate_scalar_calorie_m, MeanCalorie, 4190.02;
        validate_scalar_calorie, Calorie, 4184.0;
        validate_scalar_calorie_nutrition_label, NutritionLabelCalories, 4_184_000.0;
        validate_scalar_cicero, Cicero, 0.004_511_111_111_111_111;
        validate_scalar_circular_mil_international, CircularMilInternational, 1_217_369_588.005_220_4;
        validate_scalar_cord_international, CordInternational, 3.624_556_363_776;
        validate_scalar_cord_us, CordUS, 3.624_556_363_776;
        validate_scalar_cubic_foot_international, CubicFootInternational, 0.028_316_846_592;
        validate_scalar_cubic_inch_international, CubicInchInternational, 1.638_706_4e-05;
        validate_scalar_cubic_yard_international, CubicYardInternational, 0.764_554_857_984;
        validate_scalar_cup_us, CupUS, 0.000_236_588_236_5;
        validate_scalar_curie, Curie, 37_000_000_000.0;

        validate_scalar_day, Day, 86_400.0;
        validate_scalar_degree, Degree, 0.0174_532_925_199_432_95;
        validate_scalar_degree_minute, MinuteAngle, 0.000_290_888_208_665_721_6;
        validate_scalar_degree_rankine, DegreeRankine, 0.555_555_555_555_555_6;
        validate_scalar_degree_second, SecondAngle, 4.848_136_811_095_36e-06;
        validate_scalar_didot, Didot, 0.000_375_925_925_925_925_93;
        validate_scalar_dram_ap, DramApothecaries, 3.887_934_6;
        validate_scalar_dram_av, DramAvoirdupois, 1.771_845_195_312_5;
        validate_scalar_dry_pint_us, DryPintUS, 0.000_550_610_471_357_5;
        validate_scalar_dry_quart_us, DryQuartUS, 0.001_101_220_942_715;
        validate_scalar_dyne, Dyne, 0.01;

        validate_scalar_electron_mass, ElectronMass, 9.109_389_7e-28;
        validate_scalar_electron_vold, Electronvolt, 1.602_177_33e-16;
        validate_scalar_elementary_charge, ElementaryCharge, 1.60217733e-19;
        validate_scalar_equivalents, Equivalents, 6.0221367e+23;
        validate_scalar_erg, Erg, 0.0001;

        validate_scalar_farad, Farad, 0.001;
        validate_scalar_fathom_br, FathomBritish, 1.828_798_56;
        validate_scalar_fathom_international, FathomInternational, 1.828_8;
        validate_scalar_fathom_us, FathomUS, 1.828_803_657_607_315_2;
        validate_scalar_fluid_dram_br, FluidDramBritish, 3.551_632_812_5e-06;
        validate_scalar_fluid_dram_us, FluidDramUS, 3.696_691_195_312_5e-06;
        validate_scalar_fluid_ounce_br, FluidOunceBritish, 2.841_306_25e-05;
        validate_scalar_fluid_ounce_us, FluidOunceUS, 2.95735295625e-05;
        validate_scalar_foot_br, FootBritish, 0.304_799_76;
        validate_scalar_foot_international, FootInternational, 0.3048;
        validate_scalar_foot_us, FootUS, 0.304_800_609_601_219_2;
        validate_scalar_furlong_us, FurlongUS, 201.16840233680466;

        validate_scalar_gal, Gal, 0.01;
        validate_scalar_gallon_br, GallonBritish, 0.004_546_09;
        validate_scalar_gauss, Gauss, 0.1;
        validate_scalar_gilbert, Gilbert, 0.795_774_715_459_476_8;
        validate_scalar_gill_br, GillBritish, 0.000_142_065_312_5;
        validate_scalar_gill_us, GillUS, 0.000_118_294_118_25;
        validate_scalar_gon, Gon, 0.015_707_963_267_948_967;
        validate_scalar_gram_force, GramForce, 9.806_65;
        validate_scalar_gram_percent, GramPercent, 9999.999_999_999_996;
        validate_scalar_grain, Grain, 0.064_798_91;
        validate_scalar_gray, Gray, 1.0;
        validate_scalar_gunters_chain_br, GuntersChainBritish, 20.116_784_16;
        validate_scalar_gunters_chain_us, GuntersChainUS, 20.116_840_233_680_467;

        validate_scalar_hand_international, HandInternational, 0.1016;
        validate_scalar_hertz, Hertz, 1.0;
        validate_scalar_henry, Henry, 1_000.0;
        validate_scalar_historical_winchester_gallon, HistoricalWinchesterGallon, 0.004_404_883_770_86;
        validate_scalar_horsepower, Horsepower, 745_699.871_582_270_3;
        validate_scalar_hour, Hour, 3600.0;

        validate_scalar_inch_br, InchBritish, 0.025_399_98;
        validate_scalar_inch_international, InchInternational, 0.025_4;
        validate_scalar_inch_us, InchUS, 0.025_400_050_800_101_6;

        validate_scalar_joule, Joule, 1000.0;

        validate_scalar_kayser, Kayser, 100.0;
        validate_scalar_knot_br, KnotBritish, 0.514_772_928;
        validate_scalar_knot_international, KnotInternational, 0.514_444_444_444_444_5;

        validate_scalar_lambert, Lambert, 31_415.926_535_897_932;
        validate_scalar_long_hundredweight_av, LongHunderdweightAvoirdupois, 50_802.345_44;
        validate_scalar_long_ton_av, LongTonAvoirdupois, 1_016_046.908_8;
        validate_scalar_light_year, LightYear, 9.460_730_472_580_8e+15;
        validate_scalar_ligne, Ligne, 0.002_255_555_555_555_555_4;
        validate_scalar_line, Line, 0.002_116_666_666_666_667;
        validate_scalar_link_for_gunters_chain_br, LinkForGuntersChainBritish, 0.201_167_841_6;
        validate_scalar_link_for_gunters_chain_us, LinkForGuntersChainUS, 0.201_168_402_336_804_66;
        validate_scalar_liter, Liter, 0.001;
        validate_scalar_lumen, Lumen, 1.0;
        validate_scalar_lux, Lux, 1.0;

        validate_scalar_maxwell, Maxwell, 1.0e-05;
        validate_scalar_mean_gregorian_month, MeanGregorianMonth, 2_629_746.0;
        validate_scalar_mean_gregorian_year, MeanGregorianYear, 31_556_952.0;
        validate_scalar_mean_julian_month, MeanJulianMonth, 2_629_800.0;
        validate_scalar_mean_julian_year, MeanJulianYear, 31_557_600.0;
        validate_scalar_metric_cup, MetricCup, 0.000_24;
        validate_scalar_metric_fluid_ounce, MetricFluidOunce, 3.0e-05;
        validate_scalar_metric_tablespoon, MetricTablespoon, 1.5e-05;
        validate_scalar_metric_teaspoon, MetricTeaspoon, 5.0e-06;
        validate_scalar_mil_international, MilInternational, 2.54e-05;
        validate_scalar_mil_us, MilUS, 2.540_005_080_010_16e-05;
        validate_scalar_mile_br, MileBritish, 1_609.342_732_8;
        validate_scalar_mile_international, MileInternational, 1_609.344;
        validate_scalar_mile_us, MileUS, 1_609.347_218_694_437_3;
        validate_scalar_minim_br, MinimBritish, 5.919_388_020_833_333_4e-08;
        validate_scalar_minim_us, MinimUS, 6.161_151_992_187_5e-08;
        validate_scalar_mole, Mole, 6.0221367e+23;
        validate_scalar_month, Month, 2_629_800.0;

        validate_scalar_nautical_mile_br, NauticalMileBritish, 1_853.182_540_8;
        validate_scalar_nautical_mile_internationa, NauticalMileInternational, 1852.0;
        validate_scalar_newton, Newton, 1000.0;
        validate_scalar_ohm, Ohm, 1000.0;
        validate_scalar_oersted, Oersted, 79.577_471_545_947_67;
        validate_scalar_ounce_ap, OunceApothecaries, 31.103_476_8;
        validate_scalar_ounce_av, OunceAvoirdupois, 28.349_523_125;
        validate_scalar_ounce_m, MetricOunce, 28.0;
        validate_scalar_ounce_tr, OunceTroy, 31.103_476_8;

        validate_scalar_pace_br, PaceBritish, 0.761_999_4;
        validate_scalar_parsec, Parsec, 3.085_678e+16;
        validate_scalar_parts_per_billion, PartsPerBillion, 1.0e-09;
        validate_scalar_parts_per_million, PartsPerMillion, 1.0e-06;
        validate_scalar_parts_per_thousand, PartsPerThousand, 1.0e-03;
        validate_scalar_parts_per_trillion, PartsPerTrillion, 1.0e-012;
        validate_scalar_pascal, Pascal, 1_000.0;
        validate_scalar_peck_br, PeckBritish, 0.009_092_18;
        validate_scalar_peck_us, PeckUS, 0.008_809_767_541_72;
        validate_scalar_percent, Percent, 0.01;
        validate_scalar_permeability_of_vacuum, PermeabilityOfVacuum, 0.001_256_637_061_435_917_5;
        validate_scalar_permittivity_of_vacuum, PermittivityOfVacuum, 8.854_187_817e-15;
        validate_scalar_phot, Phot, 0.000_1;
        validate_scalar_pica, Pica, 0.004_233_333_333_333_334;
        validate_scalar_pied, Pied, 0.324_8;
        validate_scalar_pint_br, PintBritish, 0.000_568_261_25;
        validate_scalar_pint_us, PintUS, 0.000_473_176_473;
        validate_scalar_planck_constant, PlanckConstant, 6.626_075_5e-31;
        validate_scalar_point, Point, 0.000_352_777_777_777_777_76;
        validate_scalar_pouce, Pouce, 0.027_066_666_666_666_666;
        validate_scalar_pound_ap, PoundApothecaries, 373.241_721_6;
        validate_scalar_pound_av, PoundAvoirdupois, 453.592_37;
        validate_scalar_pound_tr, PoundTroy, 373.241_721_6;
        validate_scalar_pound_force, PoundForceAvoirdupois, 4448.221_615_260_5;
        validate_scalar_poise, Poise, 100.0;
        validate_scalar_printers_pica, PrintersPica, 0.004_217_517_6;
        validate_scalar_printers_point, PrintersPoint, 0.000_351_459_8;
        validate_scalar_protein_nitrogen_unit, ProteinNitrogenUnit, 1.0;
        validate_scalar_proton_mass, ProtonMass, 1.672_623_100_000_000_2e-24;

        validate_scalar_quart_br, QuartBritish, 0.001_136_522_5;
        validate_scalar_quart_us, QuartUS, 0.000_946_352_946;
        validate_scalar_queen_annes_wine_gallon, QueenAnnesWineGallonUS, 0.003_785_411_784;

        validate_scalar_ramdens_chain_us, RamdensChainUS, 30.480_060_960_121_92;
        validate_scalar_radiation_absorbed_dose, RadiationAbsorbedDose, 0.01;
        validate_scalar_radiation_equivalent_man, RadiationEquivalentMan, 0.01;
        validate_scalar_rod_br, RodBritish, 5.029_196_04;
        validate_scalar_rod_us, RodUS, 5.029_210_058_420_117;
        validate_scalar_roentgen, Roentgen, 2.58e-07;

        validate_scalar_scruple_ap, ScrupleApothecaries, 1.295_978_2;
        validate_scalar_section, Section, 2_589_998.470_319_521;
        validate_scalar_short_hundredweight_av, ShortHundredweightAvoirdupois, 45_359.237;
        validate_scalar_short_ton_av, ShortTonAvoirdupois, 907_184.74;
        validate_scalar_siemens, Siemens, 0.001;
        validate_scalar_sievert, Sievert, 1.0;
        validate_scalar_square_foot_international, SquareFootInternational, 0.092_903_04;
        validate_scalar_square_mile_us, SquareMileUS, 2_589_998.470_319_521;
        validate_scalar_square_rod_us, SquareRodUS, 25.292_953_811_714_074;
        validate_scalar_square_yard_international, SquareYardInternational, 0.836_127_36;
        validate_scalar_standard_acceleration_of_free_fall, StandardAccelerationOfFreeFall, 9.80665;
        validate_scalar_standard_atomsphere, StandardAtmosphere, 101_325_000.0;
        validate_scalar_steradian, Steradian, 1.0;
        validate_scalar_stilb, Stilb, 10_000.0;
        validate_scalar_stokes, Stokes, 0.000_1;
        validate_scalar_stone_av, StoneAvoirdupois, 6_350.293_18;
        validate_scalar_synodal_month, SynodalMonth, 2_551_442.976;

        validate_scalar_tablespoon_us, TablespoonUS, 1.478_676_478_125e-05;
        validate_scalar_teaspoon_us, TeaspoonUS, 4.928_921_593_75e-06;
        validate_scalar_tesla, Tesla, 1000.0;
        validate_scalar_the_number_pi, TheNumberPi, 3.141_592_653_589_793;
        validate_scalar_the_number_ten_for_arbitrary_powers_caret, TheNumberTenForArbitraryPowersCaret, 10.0;
        validate_scalar_the_number_ten_for_arbitrary_powers_star, TheNumberTenForArbitraryPowersStar, 10.0;
        validate_scalar_tonne, Tonne, 1_000_000.0;
        validate_scalar_township, Township, 93_239_944.931_502_76;
        validate_scalar_tropical_year, TropicalYear, 31_556_925.216;

        validate_scalar_unified_atomic_mass_unit, UnifiedAtomicMassUnit, 1.660_540_2e-24;
        validate_scalar_velocity_of_light, VelocityOfLight, 299_792_458.0;
        validate_scalar_volt, Volt, 1000.0;
        validate_scalar_watt, Watt, 1000.0;
        validate_scalar_weber, Weber, 1000.0;
        validate_scalar_week, Week, 604_800.0;
        validate_scalar_yard_br, YardBritish, 0.914_399_28;
        validate_scalar_yard_international, YardInternational, 0.914_4;
        validate_scalar_yard_us, YardUS, 0.914_401_828_803_657_6;
        validate_scalar_year, Year, 31_557_600.0;
        validate_special_scalar_degree_celsius, DegreeCelsius, 274.15;
        validate_special_scalar_degree_fahrenheit, DegreeFahrenheit, 255.927_777_777_777_8;
        validate_special_scalar_degree_reaumur, DegreeReaumur, 274.400_000_000_000_03;
        validate_special_scalar_ph, PH, 0.0;
    );

    validate_magnitudes!(
        validate_magnitude_candela, Candela, 1.0;
        validate_magnitude_coulomb, Coulomb, 1.0;
        validate_magnitude_gram, Gram, 1.0;
        validate_magnitude_kelvin, Kelvin, 1.0;
        validate_magnitude_radian, Radian, 1.0;
        validate_magnitude_second, Second, 1.0;
        validate_magnitude_acre_us, AcreUS, 1.0;
        validate_magnitude_are, Are, 1.0;
        validate_magnitude_degree, Degree, 1.0;
        validate_magnitude_degree_celsius, DegreeCelsius, 1.0;
        validate_magnitude_degree_fahrenheit, DegreeFahrenheit, 1.000_000_000_000_056_8;
        validate_magnitude_degree_reaumur, DegreeReaumur, 1.0;
        validate_magnitude_fluid_ounce_us, FluidOunceUS, 1.0;
        validate_magnitude_foot_us, FootUS, 1.0;
        validate_magnitude_foot_international, FootInternational, 1.0;
        validate_magnitude_gill_us, GillUS, 1.0;
        validate_magnitude_inch_international, InchInternational, 1.0;
        validate_magnitude_liter, Liter, 1.0;
        validate_magnitude_mole, Mole, 1.0;
        validate_magnitude_parts_per_billion, PartsPerBillion, 1.0;
        validate_magnitude_parts_per_million, PartsPerMillion, 1.0;
        validate_magnitude_parts_per_thousand, PartsPerThousand, 1.0;
        validate_magnitude_percent, Percent, 1.0;
        validate_magnitude_ph, PH, 1.0;
        validate_magnitude_pint_us, PintUS, 1.0;
        validate_magnitude_prism_diopter, PrismDiopter, 1.0;
        validate_magnitude_quart_us, QuartUS, 1.0;
        validate_magnitude_queen_annes_wine_gallon, QueenAnnesWineGallonUS, 1.0;
        validate_magnitude_rod_us, RodUS, 1.0;
        validate_magnitude_the_number_pi, TheNumberPi, 1.0;
    );

    #[test]
    fn validate_display() {
        let atom = Atom::TheNumberPi;
        assert_eq!(&atom.to_string(), "[pi]")
    }

    #[cfg(feature = "with_serde")]
    mod with_serde {
        use super::super::Atom;
        use serde_json;

        #[test]
        fn validate_serialization() {
            let j = serde_json::to_string(&Atom::BushelUS)
                .expect("Couldn't convert Atom to JSON String");

            assert_eq!("\"BushelUS\"", j);
        }

        #[test]
        fn validate_deserialization() {
            let k =
                serde_json::from_str("\"BushelUS\"").expect("Couldn't convert JSON String to Atom");

            assert_eq!(Atom::BushelUS, k);
        }
    }
}
